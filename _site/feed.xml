<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-15T08:34:34+08:00</updated><id>http://localhost:4000/</id><title type="html">Michael</title><subtitle>Developer</subtitle><entry><title type="html">亿级流量网站架构核心技术</title><link href="http://localhost:4000/architecture/2017/08/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF.html" rel="alternate" type="text/html" title="亿级流量网站架构核心技术" /><published>2017-08-10T00:00:00+08:00</published><updated>2017-08-10T00:00:00+08:00</updated><id>http://localhost:4000/architecture/2017/08/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF</id><content type="html" xml:base="http://localhost:4000/architecture/2017/08/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF.html">&lt;h4 id=&quot;第1部分-概述&quot;&gt;第1部分 概述&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;交易系统设计的一些原则
    &lt;ul&gt;
      &lt;li&gt;墨菲定律
        &lt;ol&gt;
          &lt;li&gt;任何事情都没有表面看起来那么简单&lt;/li&gt;
          &lt;li&gt;所有的事情都会比你预计的时间长&lt;/li&gt;
          &lt;li&gt;可能出错的事情总会出错&lt;/li&gt;
          &lt;li&gt;如果你担心某种情况发生，那么它就更有可能发生&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;系统划分时，也需要思考康威定律
        &lt;ol&gt;
          &lt;li&gt;系统架构是公司组织架构的反映&lt;/li&gt;
          &lt;li&gt;应该按照业务闭环进行系统拆分／组织架构划分，实现闭环／高内聚／低耦合，减少沟通成本&lt;/li&gt;
          &lt;li&gt;如果沟通出现问题，那么应该考虑进行系统和组织架构的调整&lt;/li&gt;
          &lt;li&gt;在合适时机进行系统拆分，不要一开始就把系统／服务拆得非常细，虽然闭环，但每个人维护的系统多，维护成本高。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;二八定律&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;高并发原则&quot;&gt;高并发原则&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;无状态&lt;/li&gt;
  &lt;li&gt;拆分
    &lt;ul&gt;
      &lt;li&gt;系统维度：按照系统功能／业务拆分，比如商品系统，购物车，结算，订单系统等&lt;/li&gt;
      &lt;li&gt;功能维度：对一个系统进行功能再拆分，比如优惠券系统可以拆分为后台券创建系统，领券系统，用券系统等&lt;/li&gt;
      &lt;li&gt;读写维度：根据读写比例特性进行拆分。读量大采用缓存，写量大采用分库分表。聚合读取场景，考虑数据异构拆分系统，将分散在多处的数据聚合到一起存储，提升系统的性能和可靠性。&lt;/li&gt;
      &lt;li&gt;AOP维度：根据访问特性，按照AOP进行拆分。&lt;/li&gt;
      &lt;li&gt;模块维度：比如按照基础或者代码维护特性进行拆分，如基础模块分库分表，数据库连接池等。代码结构按照三层架构Web，Service，DAO进行划分。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;服务化：进程内服务-》单机远程服务-》集群手动注册服务-》自动注册和发现服务-》服务的分组／隔离／路由-》服务治理如限流／黑名单&lt;/li&gt;
  &lt;li&gt;消息队列：大流量缓冲，数据校对&lt;/li&gt;
  &lt;li&gt;数据异构：数据异构，数据闭环&lt;/li&gt;
  &lt;li&gt;缓存银弹: 浏览器端缓存，APP客户端缓存，CDN缓存，接入层缓存，应用层缓存，分布式缓存&lt;/li&gt;
  &lt;li&gt;并发化&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;高可用原则&quot;&gt;高可用原则&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;降级：流量降级，业务降级&lt;/li&gt;
  &lt;li&gt;限流：目的防止恶意请求流量，恶意攻击，以及防止流量超出系统峰值。&lt;/li&gt;
  &lt;li&gt;切流量：DNS，HttpDNS，LVS／HaProxy／Nginx&lt;/li&gt;
  &lt;li&gt;可回滚&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;业务设计原则&quot;&gt;业务设计原则&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;防重设计，重复提交表单，下单扣库存，考虑防重key，防重表。&lt;/li&gt;
  &lt;li&gt;幂等设计，接口幂等，异步回调&lt;/li&gt;
  &lt;li&gt;流程可定义&lt;/li&gt;
  &lt;li&gt;状态与状态机&lt;/li&gt;
  &lt;li&gt;后台系统操作可反馈&lt;/li&gt;
  &lt;li&gt;后台系统审批化&lt;/li&gt;
  &lt;li&gt;文档和注释&lt;/li&gt;
  &lt;li&gt;备份&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;总结&quot;&gt;总结&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://www.processon.com/view/link/5990f37de4b0b7b347dd9f99&quot;&gt;高可用脑图&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;第2部分-高可用&quot;&gt;第2部分 高可用&lt;/h4&gt;

&lt;h5 id=&quot;负载均衡与反向代理&quot;&gt;负载均衡与反向代理&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;LVS/F5 + Nginx + OpenResty + Tomcat&lt;/li&gt;
  &lt;li&gt;对于负载均衡关心如下方面：
    &lt;ul&gt;
      &lt;li&gt;上游服务器配置：使用upstream server配置上游服务器&lt;/li&gt;
      &lt;li&gt;负载均衡算法：配置多个上游服务器时的负载均衡机制&lt;/li&gt;
      &lt;li&gt;失败重试机制：配置当超时或上游服务器不存活时，是否需要重试其他上游服务器&lt;/li&gt;
      &lt;li&gt;服务器心跳检查：上游服务器的健康检查／心跳检查&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;给Nginx 配置上游服务器，即负载均衡到真实处理业务的服务器，通过http指令下配置upstream即可&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;backend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9080&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//权重:默认为1,权重越大分配给这台服务器的请求越多,需要根据服务器的实际处理能力设置权重&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9090&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// proxy_pass&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//backend; //当访问Nginx时,会将请求反向代理到backend配置的upstream server&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;负载均衡算法，用来解决用户请求到来时如何选择服务器进行处理.
    &lt;ul&gt;
      &lt;li&gt;默认round-robin（轮询,通过配合weight配置实现基于权重轮询);&lt;/li&gt;
      &lt;li&gt;ip_hash:根据客户IP进行负载均衡即相同的IP将负载均衡到同一个upstream server.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;backend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ip_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9080&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//权重:默认为1,权重越大分配给这台服务器的请求越多,需要根据服务器的实际处理能力设置权重&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9090&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;hash key [consistent]:对某一个key进行哈希或者使用一致性哈希算法进行负载均衡。问题是：当添加／删除一台服务器时，导致很多key被重新负载均衡到不同的服务器，从而可能导致后端出现问题，因此建议考虑一致性哈希算法，当添加／删除一台机器，只有少数key被重新负载均衡到不同的服务器&lt;/li&gt;
  &lt;li&gt;哈希算法：此处是根据请求uri进行负载均衡，可以使用Nginx变量，因此可以实现复杂的算法。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;backend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9080&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//权重:默认为1,权重越大分配给这台服务器的请求越多,需要根据服务器的实际处理能力设置权重&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9090&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;一致性哈希算法：consistent_key动态指定。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nginx_local_server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$consistent_key&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;consistent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9080&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//权重:默认为1,权重越大分配给这台服务器的请求越多,需要根据服务器的实际处理能力设置权重&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9090&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$consistent_key&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$arg_cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//优先考虑请求参数cat，如果没有再根据uri进行负载均衡&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$consistent_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$consistent_key&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;基于Lua设置一致性哈希key TODO&lt;/li&gt;
  &lt;li&gt;失败重试&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;backend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9080&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//表示10s内失败了2次就任务该服务器不可用/不存活,然后摘掉,10s后会再次将该服务器加入存活上游服务器列表进行重试&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;61.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9090&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_read_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_send_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;proxy_next_upstream_error&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_next_upstream_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_next_upstream_tries&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//backend;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add_header&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upstream_addr&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$upstream_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;健康检查：TCP心跳检查，HTTP心跳检查&lt;/li&gt;
  &lt;li&gt;域名上游配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;backend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;备份上游服务器&lt;/li&gt;
  &lt;li&gt;不可用上游服务器&lt;/li&gt;
  &lt;li&gt;长连接&lt;/li&gt;
  &lt;li&gt;HTTP反向代理&lt;/li&gt;
  &lt;li&gt;HTTP动态负载均衡&lt;/li&gt;
  &lt;li&gt;Nginx四层负载均衡&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;隔离术&quot;&gt;隔离术&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;线程池隔离&lt;/li&gt;
  &lt;li&gt;进程隔离&lt;/li&gt;
  &lt;li&gt;集群隔离&lt;/li&gt;
  &lt;li&gt;机房隔离&lt;/li&gt;
  &lt;li&gt;读写隔离&lt;/li&gt;
  &lt;li&gt;动静隔离&lt;/li&gt;
  &lt;li&gt;爬虫隔离，1. 限流 2. 在负载均衡层面将爬虫路由到单独集群，从而保证正常流量可用。 IP+Cookie避免误杀&lt;/li&gt;
  &lt;li&gt;热点隔离&lt;/li&gt;
  &lt;li&gt;资源隔离&lt;/li&gt;
  &lt;li&gt;使用Hystrix实现隔离&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;限流详解&quot;&gt;限流详解&lt;/h5&gt;
&lt;h5 id=&quot;降级特级&quot;&gt;降级特级&lt;/h5&gt;
&lt;h5 id=&quot;超时与重试机制&quot;&gt;超时与重试机制&lt;/h5&gt;
&lt;h5 id=&quot;回滚机制&quot;&gt;回滚机制&lt;/h5&gt;
&lt;h5 id=&quot;压测与预案&quot;&gt;压测与预案&lt;/h5&gt;</content><author><name></name></author><category term="Architecture" /><summary type="html">亿级流量网站架构核心技术</summary></entry><entry><title type="html">重构-改善既有代码的设计</title><link href="http://localhost:4000/architecture/2017/07/26/%E9%87%8D%E6%9E%84%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1.html" rel="alternate" type="text/html" title="重构-改善既有代码的设计" /><published>2017-07-26T00:00:00+08:00</published><updated>2017-07-26T00:00:00+08:00</updated><id>http://localhost:4000/architecture/2017/07/26/%E9%87%8D%E6%9E%84%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="http://localhost:4000/architecture/2017/07/26/%E9%87%8D%E6%9E%84%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1.html">&lt;h4 id=&quot;重构是在不改变软件可观察行为的前提下改善其内部结构&quot;&gt;重构是在不改变软件可观察行为的前提下改善其内部结构。&lt;/h4&gt;

&lt;h4 id=&quot;有一句古老的工程谚语如果它还可以运行就不要动它对吗&quot;&gt;有一句古老的工程谚语：如果它还可以运行，就不要动它。对吗？&lt;/h4&gt;

&lt;h4 id=&quot;第一章-重构第一个案例&quot;&gt;第一章 重构第一个案例&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后再添加特性。&lt;/li&gt;
  &lt;li&gt;重构第一步：为即将修改的代码建立一组可靠的测试环境，有自我校验的能力，提高重构速度。用现有的程序跑出测试用例，测试用例尽可能全。输入跟输出，然后留存方便重构后的代码进行校验。&lt;/li&gt;
  &lt;li&gt;重构步骤的本质，由于每次修改的幅度都很小，所以任何错误都很容易发现。你不必耗费大把时间调试。&lt;/li&gt;
  &lt;li&gt;任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。&lt;/li&gt;
  &lt;li&gt;重构的节奏：测试，小修改，测试，小修改，测试，小修改。。。。。。正是这种节奏让重构得以快速而安全的前进。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第二章-重构原则&quot;&gt;第二章 重构原则&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;重构（名词）：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。&lt;/li&gt;
  &lt;li&gt;重构（动词）：使用一系列重构手段，在不改变软件可观察行为的前提下，调整其结构。&lt;/li&gt;
  &lt;li&gt;重构的目的：1. 改进软件设计。 2. 使软件更易于理解。3.重构帮助找到bug 4. 重构提高编程速度&lt;/li&gt;
  &lt;li&gt;事不过三，三则重构。1. 添加新功能时重构 2. 修补错误时重构 3. 复审代码时重构&lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;难以阅读的程序，难以修改。2.逻辑重复的程序，难以修改。 3. 添加新行为时需要修改已有代码的程序，难以修改。 4. 带复杂条件逻辑的程序，难以修改。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;希望 1. 容易阅读 2 所有逻辑都只在唯一地点指定 3. 新的改动不会危及现有行为 4. 尽可能简单表达条件逻辑&lt;/li&gt;
  &lt;li&gt;计算机科学时这样一门科学：它相信所有问题都可以通过增加一个间接层来解决。&lt;/li&gt;
  &lt;li&gt;间接层和重构。简介层的价值：1 允许逻辑共享 2. 分开解释意图和实现 3.隔离变化 4. 封装条件逻辑&lt;/li&gt;
  &lt;li&gt;不要过早发布接口，请修改你的代码所有权政策，使重构更顺畅。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第三章-代码的坏味道&quot;&gt;第三章 代码的坏味道&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicated Code&lt;/li&gt;
  &lt;li&gt;Long Method&lt;/li&gt;
  &lt;li&gt;Large Class&lt;/li&gt;
  &lt;li&gt;Long Parameter List&lt;/li&gt;
  &lt;li&gt;Divergent Change 发散式变化&lt;/li&gt;
  &lt;li&gt;Shotgun Surgery 散弹式修改&lt;/li&gt;
  &lt;li&gt;Feature Envy 依恋情结&lt;/li&gt;
  &lt;li&gt;Data Clumps 数据泥团&lt;/li&gt;
  &lt;li&gt;Primitive Obsession 基本类型偏执&lt;/li&gt;
  &lt;li&gt;Switch Statements switch 惊悚现身&lt;/li&gt;
  &lt;li&gt;Parallel InheritanceHierarchies 平行继承体系&lt;/li&gt;
  &lt;li&gt;Lazy Class 冗赘类&lt;/li&gt;
  &lt;li&gt;Speculative Generality 夸夸其谈未来性&lt;/li&gt;
  &lt;li&gt;Temporary Field 令人迷惑的暂时字段&lt;/li&gt;
  &lt;li&gt;Message Chains 过度耦合的消息链&lt;/li&gt;
  &lt;li&gt;Middle Man 中间人&lt;/li&gt;
  &lt;li&gt;Inappropriate Intimacy&lt;/li&gt;
  &lt;li&gt;Alternative Class with Different Interfaces 异曲同工的类&lt;/li&gt;
  &lt;li&gt;Incomplete Library Class 不完美的库类&lt;/li&gt;
  &lt;li&gt;Data Class&lt;/li&gt;
  &lt;li&gt;Refused Bequest 被拒绝的遗赠&lt;/li&gt;
  &lt;li&gt;Comments 过多的注释，当你感觉需要写注释时，请先尝试重试，试着让所有注释都变得多余。当你不知道该做什么才是注释良好运用时机。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第四章-构筑测试体系&quot;&gt;第四章 构筑测试体系&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;确保所有测试都完全自动化，让他们检查自己的测试结果&lt;/li&gt;
  &lt;li&gt;一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间&lt;/li&gt;
  &lt;li&gt;频繁地运行测试，每次编译请把测试也考虑进去，每天至少执行每个测试一次。&lt;/li&gt;
  &lt;li&gt;每当你收到bug报告，请先写一个单元测试来暴漏bug。&lt;/li&gt;
  &lt;li&gt;测试用例主要是测试你最担心出错的部分。&lt;/li&gt;
  &lt;li&gt;考虑可能出错的边界条件，把测试火力集中在那儿。&lt;/li&gt;
  &lt;li&gt;当事情被认为应该会出错时，别忘了检查是否抛出了预期的异常。&lt;/li&gt;
  &lt;li&gt;不要因为测试无法捕捉所有bug就不写测试，因为测试的确可以捕捉到大多数bug。&lt;/li&gt;
  &lt;li&gt;花合理时间抓住大多数bug，好过，穷尽一生抓尽所有bug。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第五章-重构列表&quot;&gt;第五章 重构列表&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;重构手法，名称，简单概要，动机，做法，范例&lt;/li&gt;
  &lt;li&gt;寻找引用点。&lt;/li&gt;
  &lt;li&gt;这些重构手法有多成熟?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第六章-重新组织函数&quot;&gt;第六章 重新组织函数&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Extract Method 提炼函数&lt;/li&gt;
  &lt;li&gt;Inline Method 内联函数&lt;/li&gt;
  &lt;li&gt;Inline Temp 内联临时变量&lt;/li&gt;
  &lt;li&gt;Relace Temp with Query 以查询取代临时变量&lt;/li&gt;
  &lt;li&gt;Introduce Explaining Variable 引入解释性变量&lt;/li&gt;
  &lt;li&gt;Split Temporary Variable 分解临时变量&lt;/li&gt;
  &lt;li&gt;Remove Assignments to Parameters 移除对参数的赋值&lt;/li&gt;
  &lt;li&gt;Relace Method with Method Object 以函数对象取代函数&lt;/li&gt;
  &lt;li&gt;Substitue Algorithm 替换算法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第七章-在对象之间搬移特性&quot;&gt;第七章 在对象之间搬移特性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Move Method 搬移函数&lt;/li&gt;
  &lt;li&gt;Move Field 搬移字段&lt;/li&gt;
  &lt;li&gt;Extract Class 提炼类&lt;/li&gt;
  &lt;li&gt;Inline Class 将类内联化&lt;/li&gt;
  &lt;li&gt;Hide Delegate 隐藏 “委托关系”&lt;/li&gt;
  &lt;li&gt;Remove Middle Man 移除中间人&lt;/li&gt;
  &lt;li&gt;Introduce Foreign Method 引入外加函数&lt;/li&gt;
  &lt;li&gt;Introduce Local Extension 引入本地扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第八章-重新组织数据&quot;&gt;第八章 重新组织数据&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Self Encapsulate Fiedl 自封装字段&lt;/li&gt;
  &lt;li&gt;Replace Data Value with Object 以对象取代数据值&lt;/li&gt;
  &lt;li&gt;Change Value to Reference 将值对象改为引用对象&lt;/li&gt;
  &lt;li&gt;Change Reference to Value 将引用对象改为值对象&lt;/li&gt;
  &lt;li&gt;Replace Array with Object 以对象取代数组&lt;/li&gt;
  &lt;li&gt;Duplicate Observed Data 复制”被监视数据“&lt;/li&gt;
  &lt;li&gt;Change Unidirectional Association to Bidiredctional 将单向关联改为双向关联&lt;/li&gt;
  &lt;li&gt;Change Bidiredctional Association to Unidirectional 将双向关联改为单向关联&lt;/li&gt;
  &lt;li&gt;Replace Magic Number with Symbolic Constant 以字面常量取代魔法数&lt;/li&gt;
  &lt;li&gt;Encapusulate Field 封装字段&lt;/li&gt;
  &lt;li&gt;Encapsulate Collection 封装集合&lt;/li&gt;
  &lt;li&gt;Relace Record with Data Class 以数据类取代记录&lt;/li&gt;
  &lt;li&gt;Replace Type Code with Class 以类取代类型码&lt;/li&gt;
  &lt;li&gt;Replace Type Code with Subclasses 以子类取代类型码&lt;/li&gt;
  &lt;li&gt;Replace Type Code with State/Strategy 以State/Strategy取代类型码&lt;/li&gt;
  &lt;li&gt;Replace Subclass with Fields 以字段取代子类&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第九章-简化条件表达式&quot;&gt;第九章 简化条件表达式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Decompose Conditional 分解条件表达式&lt;/li&gt;
  &lt;li&gt;Consolidate Conditional Expression 合并条件表达式&lt;/li&gt;
  &lt;li&gt;Consolidate Duplicate Conditional Fragments 合并重复的条件片段&lt;/li&gt;
  &lt;li&gt;Remove Control Flag 移除控制标记&lt;/li&gt;
  &lt;li&gt;Replace Nested Conditional with Guard Clauses 以卫语句取代嵌套条件表达式&lt;/li&gt;
  &lt;li&gt;Replace Conditional with Polymorphism 以多态取代条件表达式&lt;/li&gt;
  &lt;li&gt;Introduce Null Object 引入Null对象&lt;/li&gt;
  &lt;li&gt;Introduce Assertion 引入断言&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第十章-简化函数调用&quot;&gt;第十章 简化函数调用&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Rename Method 函数改名&lt;/li&gt;
  &lt;li&gt;Add Parameter 添加参数&lt;/li&gt;
  &lt;li&gt;Remove Parameter 移除参数&lt;/li&gt;
  &lt;li&gt;Separate Query from Modifier 将查询函数和修改函数分离&lt;/li&gt;
  &lt;li&gt;Parameterize Method 令函数携带参数&lt;/li&gt;
  &lt;li&gt;Replace Parameter with Explicit Methods 以明确函数取代参数&lt;/li&gt;
  &lt;li&gt;Preserve Whole Object 保持对象完整&lt;/li&gt;
  &lt;li&gt;Replace Parameter with Methods 以函数取代参数&lt;/li&gt;
  &lt;li&gt;Introduce Parameter Object 引入参数对象&lt;/li&gt;
  &lt;li&gt;Remove Setting Method 移除设值函数&lt;/li&gt;
  &lt;li&gt;Hide Method 隐藏函数&lt;/li&gt;
  &lt;li&gt;Replace Constructor with Factory Method 以工厂函数取代构造函数&lt;/li&gt;
  &lt;li&gt;Encapsulate Downcast 封装向下转型&lt;/li&gt;
  &lt;li&gt;Replace Error Code with Exception 以异常取代错误码&lt;/li&gt;
  &lt;li&gt;Replace Exception with Test 以测试取代异常&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第十一章-处理概括关系&quot;&gt;第十一章 处理概括关系&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Pull Up Field 字段上移&lt;/li&gt;
  &lt;li&gt;Pull Up Method 函数上移&lt;/li&gt;
  &lt;li&gt;Pull Up Constructor Body 构造函数本体上移&lt;/li&gt;
  &lt;li&gt;Push Down Method 函数下移&lt;/li&gt;
  &lt;li&gt;Push Down Field 字段下移&lt;/li&gt;
  &lt;li&gt;Extract Subclass 提炼子类&lt;/li&gt;
  &lt;li&gt;Extract Superclass 提炼超类&lt;/li&gt;
  &lt;li&gt;Extract Interface 提炼接口&lt;/li&gt;
  &lt;li&gt;Collapse Hierarchy 折叠继承体系&lt;/li&gt;
  &lt;li&gt;Form TemPlate Method 塑造模版函数&lt;/li&gt;
  &lt;li&gt;Replace Inheritance with Delegation 以委托取代继承&lt;/li&gt;
  &lt;li&gt;Replace Delegation with Inheritance 以继承取代委托&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第十二章-大型重构&quot;&gt;第十二章 大型重构&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;小小的信仰：每天都使自己的程序世界更安全&lt;/li&gt;
  &lt;li&gt;Tease Apart Inheritance 梳理并分解继承体系&lt;/li&gt;
  &lt;li&gt;Convert Procedural Design to Objects 将过程化设计转化为对象设计&lt;/li&gt;
  &lt;li&gt;Separate Domain from Presentation 将领域和表述／显示分离&lt;/li&gt;
  &lt;li&gt;Extract Hierarchy 提炼继承体系&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第十三章-重构复用与实现&quot;&gt;第十三章 重构，复用与实现&lt;/h4&gt;

&lt;h4 id=&quot;第十四章-重构工具&quot;&gt;第十四章 重构工具&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;重构与新功能需要同时进行&lt;/li&gt;
  &lt;li&gt;Refactoring Browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第十五章-总结&quot;&gt;第十五章 总结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;随时挑一个目标&lt;/li&gt;
  &lt;li&gt;没把我就停下来&lt;/li&gt;
  &lt;li&gt;学习原路返回&lt;/li&gt;
  &lt;li&gt;二重奏&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;要点列表&quot;&gt;要点列表&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后再添加特性。&lt;/li&gt;
  &lt;li&gt;重构前先检查自己是否有一套可靠的测试机制，这些测试机制必须有一套自我检验能力&lt;/li&gt;
  &lt;li&gt;重构技术就是以微小的步伐修改程序。如果你犯下错误，很容易便可发现它。&lt;/li&gt;
  &lt;li&gt;任何傻瓜都能写出计算机可以理解的代码，唯有写出人类容易理解的代码才是优秀的程序员&lt;/li&gt;
  &lt;li&gt;重构，对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。&lt;/li&gt;
  &lt;li&gt;重构：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其机构。&lt;/li&gt;
  &lt;li&gt;事不过三，三则重构&lt;/li&gt;
  &lt;li&gt;不要过早发布接口，请修改你的大米所有权策略，使重构更顺畅。&lt;/li&gt;
  &lt;li&gt;当感觉需要写注释时，请尝试重构，让所有注释都变得多余&lt;/li&gt;
  &lt;li&gt;确保所有测试都完全自动化，让它们检查自己的测试结果&lt;/li&gt;
  &lt;li&gt;一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间。&lt;/li&gt;
  &lt;li&gt;频繁地运行测试，每次编译请把测试也考虑进去，每天至少执行每个测试一次。！！！！！&lt;/li&gt;
  &lt;li&gt;每当你收到bug报告，请先写一个测试用例来暴漏这个bug&lt;/li&gt;
  &lt;li&gt;考虑可能出错的边界条件，把测试火力集中在那儿。&lt;/li&gt;
  &lt;li&gt;当事情被大家认为应该会出错时，别忘了检查是否抛出了预期的异常&lt;/li&gt;
  &lt;li&gt;不要应为测试无法捕捉到所有bug就不写测试，因为测试的确可以捕捉到大多数bug&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;end&quot;&gt;END&lt;/h3&gt;</content><author><name></name></author><category term="Architecture" /><summary type="html">重构-改善既有代码的设计</summary></entry><entry><title type="html">亲密关系</title><link href="http://localhost:4000/books/2017/07/07/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB.html" rel="alternate" type="text/html" title="亲密关系" /><published>2017-07-07T00:00:00+08:00</published><updated>2017-07-07T00:00:00+08:00</updated><id>http://localhost:4000/books/2017/07/07/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB</id><content type="html" xml:base="http://localhost:4000/books/2017/07/07/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB.html">&lt;h4 id=&quot;简介&quot;&gt;简介&lt;/h4&gt;

&lt;h4 id=&quot;第1章-人际关系的构成&quot;&gt;第1章 人际关系的构成&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;亲密关系的性质和重要性
    &lt;ul&gt;
      &lt;li&gt;亲密关系的性质：了解程度，关心程度，相互依赖性，相互一致性，信任度，忠诚度&lt;/li&gt;
      &lt;li&gt;归属的需要&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;文化的影响
    &lt;ul&gt;
      &lt;li&gt;亲密关系变化的根源：我们对人际关系的期望和接纳，在很大程度上取决于我们所处的时代和地区的文化标准。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;个人经历的影响&lt;/li&gt;
  &lt;li&gt;个体差异的影响
    &lt;ul&gt;
      &lt;li&gt;性别差异&lt;/li&gt;
      &lt;li&gt;性认同差异&lt;/li&gt;
      &lt;li&gt;人格&lt;/li&gt;
      &lt;li&gt;自尊&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;人类本性的影响&lt;/li&gt;
  &lt;li&gt;人际互动的影响&lt;/li&gt;
  &lt;li&gt;人际关系的消极面&lt;/li&gt;
  &lt;li&gt;请你思考&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Books" /><summary type="html">亲密关系---第5版 罗兰-米勒</summary></entry><entry><title type="html">苏菲的世界</title><link href="http://localhost:4000/books/2017/07/03/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C.html" rel="alternate" type="text/html" title="苏菲的世界" /><published>2017-07-03T00:00:00+08:00</published><updated>2017-07-03T00:00:00+08:00</updated><id>http://localhost:4000/books/2017/07/03/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C</id><content type="html" xml:base="http://localhost:4000/books/2017/07/03/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C.html">&lt;h4 id=&quot;内容简介&quot;&gt;内容简介&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;14岁的少女苏菲某天放学回家，发现了神秘的一封信。—-你是谁？—-世界从哪里来？就这样，在一位神秘导师的指导引下，苏菲开始思索从古希腊到康德，从祁克果到佛洛伊德等各位大师所思考的根本问题。与此同时，苏菲不断接到了些极不寻常的来信，世界像迹团一般在她眼底展开。苏菲运用少女天生的悟性与后天知识，企图解开这些迹团然而事实真相远比她所想的更怪异、更离奇……《苏菲的世界》，即是智慧的世界，梦的世界。它将会唤醒每个人内心深处对生命的赞叹与对人生终极意义的关怀和好奇。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;作者简介&quot;&gt;作者简介&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;乔斯坦·贾德1952年生于挪威，担任高中哲学教师多年。自1986年出版第一部作品以来，已成为挪威世界级的作家。1991年《苏菲的世界》出版后，成为挪威、丹厂、瑞典和德国的畅销书，销量达三百万册。目前，已有三十多个国家购买了该书的版权。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;精彩语句&quot;&gt;精彩语句&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;成为一个优秀的哲学家的惟一条件就是要有好奇心。&lt;/li&gt;
  &lt;li&gt;有些东西是人人都需要的，那就是：明白我们是谁，为何会在这里。&lt;/li&gt;
  &lt;li&gt;如果你就是苏菲，那么你有能力逃离自己的上帝吗？&lt;/li&gt;
  &lt;li&gt;最聪明的是明白自己无知的人，真正的智慧来自内心，明辨是非者必能进退合宜。&lt;/li&gt;
  &lt;li&gt;宿命论的意思就是相信所有发生的事，都是命中注定的。—命运&lt;/li&gt;
  &lt;li&gt;意识是什么？它难道不是宇宙的一个大谜题吗？记忆又是什么？是什么东西使我们“记得”我们所看到，所经验的每一件事情？&lt;/li&gt;
  &lt;li&gt;生命本来就是悲伤而严肃的。我们来到这个美好的世界里，彼此相逢，彼此问候，并结伴同游一段短暂的时间。然后我们就失去了对方，并且莫名其妙就消失了，就像我们突然莫名其妙地来到世上一般。&lt;/li&gt;
  &lt;li&gt;你习惯了这个世界了，才会对任何事情都不感到惊奇。&lt;/li&gt;
  &lt;li&gt;这个世界不可能大家都喜欢我，我也不需要每个人都喜欢我，我只能说很多人还不了解我。&lt;/li&gt;
  &lt;li&gt;真正的知识来自内心，而不是来自别人的传授。同时，唯有出自内心的知识，才能使人拥有真正的智慧。&lt;/li&gt;
  &lt;li&gt;没有人天生该对谁好所以我们要学会感恩。&lt;/li&gt;
  &lt;li&gt;但我们生命中的意义必须由我们自己来创造，存在的意义就是要创造自己的生命。&lt;/li&gt;
  &lt;li&gt;理智和经验都缺失时，就会出现一个真空，这个真空可以由信仰填补。&lt;/li&gt;
  &lt;li&gt;我们可能会成为各种事物的奴隶，我们甚至可能成为我们的自我中心思想的奴隶。独立与自由正是我们超脱自我的欲望与恶念的方法。&lt;/li&gt;
  &lt;li&gt;孩子，我们并不只活在我们所属的时代里，我们身上也扛着历史。不要忘记你在这个房间内看到的每一样东西都曾经是崭新的。&lt;/li&gt;
  &lt;li&gt;一个人不会再次进入同一条河流。&lt;/li&gt;
  &lt;li&gt;每个人，都有唯一一个，真实的自我。这个自我，有自由的意志。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;目录&quot;&gt;目录&lt;/h4&gt;

&lt;h5 id=&quot;伊甸园-在某个时刻事物必然从无到有&quot;&gt;伊甸园-在某个时刻事物必然从无到有&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;你是谁？人是什么？世界从何而来？ 席德？&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;魔术师的礼帽-要成为一个优秀的哲学家只有一个条件要有好奇心&quot;&gt;魔术师的礼帽-要成为一个优秀的哲学家只有一个条件：要有好奇心&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;哲学是什么？&lt;/li&gt;
  &lt;li&gt;生命中最重要的是什么？&lt;/li&gt;
  &lt;li&gt;上帝是否存在？小白兔🐰&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;神话-善与恶之间脆弱的平衡&quot;&gt;神话-善与恶之间脆弱的平衡&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;神话的世界观&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;自然派哲学家-没有一件事情可以来自空无&quot;&gt;自然派哲学家-没有一件事情可以来自空无&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;万事万物是否由一种基本的物质组成？&lt;/li&gt;
  &lt;li&gt;自然派哲学家，关切的主题都是大自然与它的循环与变化&lt;/li&gt;
  &lt;li&gt;泰利斯，安纳克西曼德&lt;/li&gt;
  &lt;li&gt;所有的事物都是流动的&lt;/li&gt;
  &lt;li&gt;恩培窦可里斯认为自然界有两种力量。他称之为“爱”与“恨”。爱使得事物聚合，而恨则使他们分散。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;德谟克利特斯-世界上最巧妙的玩具&quot;&gt;德谟克利特斯-世界上最巧妙的玩具&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;原子理论&lt;/li&gt;
  &lt;li&gt;德谟克里特斯同意前面几位哲学家的看法，认为自然界的转变不是因为任何事物的有所“ 变”。他相信每一种事物都是由微小的积木所组成，而每一块积木都是永恒不变的。德谟克里特斯把这些最小的单位称为原子。原子（atom）这个字的本意是“不可分割的”。德谟克里特斯认为，证明组成各种事物的单位不可能被无限制分割成更小的单位是很重要的。 因为如果每一个组成各种事物的单位 都可以被分割成更小的单位，则大自然将开始像不断被稀释的汤一般消失了。 更重要的是， 大自然的积木必须是永恒的， 因为没有一件事物会来自虚无。 在这方面，他同意帕梅尼德斯与伊利亚地区那些哲学家的看法，也认为所有的原子都是坚硬结实的， 但却 非完全一样。 他说，如果所有原子都一模一样， 则我们将无法圆满解释它们何以能够聚合成像罂粟花、橄榄树、羊皮、人发等各种不同的东西。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;命运-算命者试图预测某些事实上极不可测的事物&quot;&gt;命运-算命者试图预测某些事实上极不可测的事物&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;你相信命运吗？&lt;/li&gt;
  &lt;li&gt;是什么力量影响历史的走向？&lt;/li&gt;
  &lt;li&gt;戴尔菲的神论&lt;/li&gt;
  &lt;li&gt;历史与医学&lt;/li&gt;
  &lt;li&gt;古希腊人相信疾病可能神降的灾祸，也相信只要人以适当的方式向神献祭，神就可能使生病的人痊愈。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;苏格拉底-最聪明的是明白自己无知的人&quot;&gt;苏格拉底-最聪明的是明白自己无知的人&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;最聪明的是明白自己无知的人，真正的智慧来自内心，明辨是非者必能进退合宜。&lt;/li&gt;
  &lt;li&gt;是否有人天生就很害羞呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;雅典-废墟中升起了几栋高楼&quot;&gt;雅典-废墟中升起了几栋高楼&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;以人为中心，公元前450年左右，雅典成了希腊王国的文化中心，从此以后，哲学走上了新的方向。&lt;/li&gt;
  &lt;li&gt;诡辩学家与自然学家有一个共通点，他们都批评传统的深化。诡辩学家认为，我们虽然无法之道所有自然之谜的答案，
却可以肯定人类必须学习如何共同生活。因此，他们宁愿关系个人在社会中的地位问题。&lt;/li&gt;
  &lt;li&gt;苏格拉底(公元前470～公元前399)？ 帮人们“生出”正确的思想，唯有出自内心的知识，才能使人拥有真正的智慧。&lt;/li&gt;
  &lt;li&gt;借着假装无知的方式，苏格拉底强迫他所遇见的人们运用本身的常识。这种装傻，装呆的方式，我们称之为“苏格拉底式的反讽”。这使得他能够不断揭露人们的思想上的弱点。&lt;/li&gt;
  &lt;li&gt;“雅典就像一匹驽马，而我就是一只不断叮它，让它具有活力的牛蝇”&lt;/li&gt;
  &lt;li&gt;哲学家“一个爱好智慧的人”&lt;/li&gt;
  &lt;li&gt;苏格拉底说：我只知道一件事情，就是我一无所知。&lt;/li&gt;
  &lt;li&gt;正确的见解导致正确的行动，知善者必能行善。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;柏拉图-回归灵魂世界的渴望&quot;&gt;柏拉图-回归灵魂世界的渴望&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;TODO&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;少校的小木屋-镜中的女孩双眼眨了一眨&quot;&gt;少校的小木屋-镜中的女孩双眼眨了一眨&lt;/h5&gt;
&lt;h5 id=&quot;亚里斯多德-一位希望澄清我们观念的严谨的逻辑学家&quot;&gt;亚里斯多德-一位希望澄清我们观念的严谨的逻辑学家&lt;/h5&gt;
&lt;h5 id=&quot;希腊文化-一丝火花&quot;&gt;希腊文化-一丝火花&lt;/h5&gt;
&lt;h5 id=&quot;明信片-我对自己实施严格的检查制度&quot;&gt;明信片-我对自己实施严格的检查制度&lt;/h5&gt;
&lt;h5 id=&quot;两种文化-避免在真空中飘浮的唯一方式&quot;&gt;两种文化-避免在真空中飘浮的唯一方式&lt;/h5&gt;
&lt;h5 id=&quot;中世纪-对了一部分并不等于错&quot;&gt;中世纪-对了一部分并不等于错&lt;/h5&gt;
&lt;h5 id=&quot;文艺复兴-啊藏在凡俗身躯里的神明子孙呐&quot;&gt;文艺复兴-啊！藏在凡俗身躯里的神明子孙呐&lt;/h5&gt;
&lt;h5 id=&quot;巴洛克时期-宛如梦中的事物&quot;&gt;巴洛克时期-宛如梦中的事物&lt;/h5&gt;
&lt;h5 id=&quot;笛卡尔-他希望清除工地上所有的瓦砾&quot;&gt;笛卡尔-他希望清除工地上所有的瓦砾&lt;/h5&gt;
&lt;h5 id=&quot;史宾诺莎-上帝不是一个傀儡戏师傅&quot;&gt;史宾诺莎-上帝不是一个傀儡戏师傅&lt;/h5&gt;
&lt;h5 id=&quot;洛克-赤裸空虚一如教师来到教室前的黑板&quot;&gt;洛克-赤裸、空虚一如教师来到教室前的黑板&lt;/h5&gt;
&lt;h5 id=&quot;休姆-将它付之一炬&quot;&gt;休姆-将它付之一炬&lt;/h5&gt;
&lt;h5 id=&quot;伯克莱-宛如燃烧的恒星旁一颗晕眩的行星&quot;&gt;伯克莱-宛如燃烧的恒星旁一颗晕眩的行星&lt;/h5&gt;
&lt;h5 id=&quot;柏客来-曾祖母向一名吉普赛妇人买的一面古老魔镜&quot;&gt;柏客来-曾祖母向一名吉普赛妇人买的一面古老魔镜&lt;/h5&gt;
&lt;h5 id=&quot;启蒙-从制针的技术到铸造大炮的方法&quot;&gt;启蒙-从制针的技术到铸造大炮的方法&lt;/h5&gt;
&lt;h5 id=&quot;康德-头上闪烁的星空与心中的道德规范&quot;&gt;康德-头上闪烁的星空与心中的道德规范&lt;/h5&gt;
&lt;h5 id=&quot;浪漫主义-神秘之路通向内心&quot;&gt;浪漫主义-神秘之路通向内心&lt;/h5&gt;
&lt;h5 id=&quot;黑格尔-可以站得住脚的就是有道理的&quot;&gt;黑格尔-可以站得住脚的就是有道理的&lt;/h5&gt;
&lt;h5 id=&quot;祁克果-欧洲正迈向破产的地步&quot;&gt;祁克果-欧洲正迈向破产的地步&lt;/h5&gt;
&lt;h5 id=&quot;马克思-在欧洲游荡的幽灵&quot;&gt;马克思-在欧洲游荡的幽灵&lt;/h5&gt;
&lt;h5 id=&quot;达尔文-满载基因航行过生命的一艘小船&quot;&gt;达尔文-满载基因航行过生命的一艘小船&lt;/h5&gt;
&lt;h5 id=&quot;弗洛伊德-他内心出现那股令人讨厌的自大的冲动&quot;&gt;弗洛伊德-他内心出现那股令人讨厌的自大的冲动&lt;/h5&gt;
&lt;h5 id=&quot;我们这个时代-人注定是要受自由之苦的&quot;&gt;我们这个时代-人注定是要受自由之苦的&lt;/h5&gt;
&lt;h5 id=&quot;花园盛会-一只白色的乌鸦&quot;&gt;花园盛会-一只白色的乌鸦&lt;/h5&gt;
&lt;h5 id=&quot;对位法-两首或多首旋律齐响&quot;&gt;对位法-两首或多首旋律齐响&lt;/h5&gt;
&lt;h5 id=&quot;那轰然一响-我们也是星尘&quot;&gt;那轰然一响-我们也是星尘&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://video.tudou.com/v/XMTc4NzAxMDY2NA==.html&quot;&gt;苏菲的世界-电影&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Books" /><summary type="html">苏菲的世界---哲学入门----（挪）贾德著；萧宝森译. 苏菲的世界 (贾德名作系列)</summary></entry><entry><title type="html">无声的告白</title><link href="http://localhost:4000/books/2017/07/03/%E6%97%A0%E5%A3%B0%E7%9A%84%E5%91%8A%E7%99%BD.html" rel="alternate" type="text/html" title="无声的告白" /><published>2017-07-03T00:00:00+08:00</published><updated>2017-07-03T00:00:00+08:00</updated><id>http://localhost:4000/books/2017/07/03/%E6%97%A0%E5%A3%B0%E7%9A%84%E5%91%8A%E7%99%BD</id><content type="html" xml:base="http://localhost:4000/books/2017/07/03/%E6%97%A0%E5%A3%B0%E7%9A%84%E5%91%8A%E7%99%BD.html">&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26382433/&quot;&gt;无声的告白–豆瓣读书&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;思考&quot;&gt;思考&lt;/h4&gt;

&lt;h5 id=&quot;我们终其一生就是要摆脱他人的期待寻找真正的自己&quot;&gt;我们终其一生，就是要摆脱他人的期待，寻找真正的自己。&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;人类都是健忘的，40岁没法理解30岁，30岁也看不懂20岁，20岁则对10岁不屑一顾。&lt;/li&gt;
  &lt;li&gt;因为年轻人的悲伤，总是比天还要大。&lt;/li&gt;
  &lt;li&gt;人天生都要被认同的。被家人父母社会，或者自己。即使一时短暂的叛逆也不过是想要某一瞬间能
吸引到别人的关注，所败了还是因为一种广义上的虚荣心。&lt;/li&gt;
  &lt;li&gt;这种被认同的心理会随着年龄的增长越来越清晰，越来与具体。比如，我想成为一个小范围的网红；我要创业，赚钱；我要成名；我要做一个酷的人，让别人都羡慕我，这是认同，是虚荣心的一种结果。&lt;/li&gt;
  &lt;li&gt;真正能摆脱他人眼光的人都是勇士，能做到的人其实少之又少。&lt;/li&gt;
  &lt;li&gt;那种渴望被世界认可的成功，不过是在成为自己之后的结果，并不是目标。&lt;/li&gt;
  &lt;li&gt;我很羡慕成功的人，我更羡慕知道自己要什么，每日都为自己而活的人。&lt;/li&gt;
  &lt;li&gt;想要平凡，从平凡中有那么点儿不平凡是所有人对于 “社会生存”这个命题里最理想的期盼。&lt;/li&gt;
  &lt;li&gt;我们应该如何选择：追寻真实的自我，还是满足别人的期待？&lt;/li&gt;
  &lt;li&gt;懂了很多道理，却仍过不好这一生。为什么?因为你不去按照道理去做，去行动。&lt;/li&gt;
  &lt;li&gt;我们头脑里总是憧憬着另一种生活，但实际情况却事与愿违。&lt;/li&gt;
  &lt;li&gt;你曾经爱的那么深，怀有那么多的期望，最后却一无所有。&lt;/li&gt;
  &lt;li&gt;你永远得不到想要的，你只是学会了如何得过且过而已。&lt;/li&gt;
  &lt;li&gt;一切苦难都会过去，学会和自己和他人和解，放过自己也放过别人。&lt;/li&gt;
  &lt;li&gt;家庭，有时候会是一个以爱的名义设置的牢笼，其恐怖在于，门上无锁，你却不敢推门而出，只能咆哮的接受一切爱的安排。
知道最后溺亡其中，或是被时间所离散。&lt;/li&gt;
  &lt;li&gt;别担心亲爱的，人生太短，而你太美。&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;微笑的意思我喜欢你你让我快乐很高兴见到你&quot;&gt;微笑的意思：”我喜欢你。你让我快乐。很高兴见到你。”&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Books" /><summary type="html">无声的告白--伍绮诗（Celeste Ng）</summary></entry><entry><title type="html">小逻辑</title><link href="http://localhost:4000/books/2017/07/03/%E5%B0%8F%E9%80%BB%E8%BE%91.html" rel="alternate" type="text/html" title="小逻辑" /><published>2017-07-03T00:00:00+08:00</published><updated>2017-07-03T00:00:00+08:00</updated><id>http://localhost:4000/books/2017/07/03/%E5%B0%8F%E9%80%BB%E8%BE%91</id><content type="html" xml:base="http://localhost:4000/books/2017/07/03/%E5%B0%8F%E9%80%BB%E8%BE%91.html">&lt;p&gt;&lt;a href=&quot;http://yuedu.163.com/source/10fd0807686844ce92a5de5cba1347bb_4&quot;&gt;小逻辑&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;

&lt;h4 id=&quot;导言&quot;&gt;导言&lt;/h4&gt;

&lt;h5 id=&quot;逻辑学概念的初步规定&quot;&gt;逻辑学概念的初步规定&lt;/h5&gt;

&lt;h5 id=&quot;思想对客观性的第一态度&quot;&gt;思想对客观性的第一态度&lt;/h5&gt;

&lt;h5 id=&quot;逻辑学概念的进一步规定和部门划分&quot;&gt;逻辑学概念的进一步规定和部门划分&lt;/h5&gt;

&lt;h5 id=&quot;第一篇存在论&quot;&gt;第一篇存在论&lt;/h5&gt;

&lt;h5 id=&quot;第二篇本质论&quot;&gt;第二篇本质论&lt;/h5&gt;

&lt;h5 id=&quot;第三篇概念论&quot;&gt;第三篇概念论&lt;/h5&gt;

&lt;h6 id=&quot;作者简介&quot;&gt;作者简介&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;格奥尔格·威廉·弗里德里希·黑格尔（Georg Wilhelm Friedrich Hegel ，1770—1831）德国最伟大哲学家之一。是德国哲学中由康德启始的德国古典哲学运动巅峰，德国古典哲学集大成者，虽然他对康德时常有所批评，假使原来没有康德的学说体系，决不会产生他的体系。黑格尔的影响固然现在渐渐衰退了，但以往一向是很大的，而且不仅限于德国。其思想体系是马克思唯物主义辩证法的主要源流。十九世纪末年，在美国和英国，一流的学院哲学家大多都是黑格尔派。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Books" /><summary type="html">小逻辑---黑格尔 著</summary></entry><entry><title type="html">Raft</title><link href="http://localhost:4000/destributed/2017/06/28/raft.html" rel="alternate" type="text/html" title="Raft" /><published>2017-06-28T00:00:00+08:00</published><updated>2017-06-28T00:00:00+08:00</updated><id>http://localhost:4000/destributed/2017/06/28/raft</id><content type="html" xml:base="http://localhost:4000/destributed/2017/06/28/raft.html">&lt;h4 id=&quot;raft-分布式一致性算法&quot;&gt;Raft 分布式一致性算法.&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://raft.github.io/&quot;&gt;raft官网&lt;/a&gt;     &lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot;&gt;raft算法演示&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本文目的:读 寻找一种易于理解的一致性算法的论文，记录核心点。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;introduction&quot;&gt;Introduction&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Strong leader: Raft uses a stronger form of leadership
than other consensus algorithms. For example,
log entries only flow from the leader to other servers.
This simplifies the management of the replicated log
and makes Raft easier to understand&lt;/li&gt;
  &lt;li&gt;Leader election: Raft uses randomized timers to
elect leaders. This adds only a small amount of
mechanism to the heartbeats already required for any
consensus algorithm, while resolving conflicts simply
and rapidly.&lt;/li&gt;
  &lt;li&gt;Membership changes: Raft’s mechanism for
changing the set of servers in the cluster uses a new
joint consensus approach where the majorities of
two different configurations overlap during transitions.
This allows the cluster to continue operating
normally during configuration changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;replicated-state-machines&quot;&gt;Replicated state machines&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://dn-0x01-io.qbox.me/raft-图1-01.png&quot; alt=&quot;图 1 &quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;raft-算法&quot;&gt;Raft 算法&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Raft通过选举一个高贵的领导人，然后给予他全部的管理复制日志的责任来实现一致性。领导人从客户端接收日志条目，把日志条目复制到其他服务器上，并且当保证安全性的时候告诉其他的服务器应用日志条目到他们的状态机中。拥有一个领导人大大简化了对复制日志的管理。例如，领导人可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都从领导人流向其他服务器。一个领导人可以宕机，可以和其他服务器失去连接，这时一个新的领导人会被选举出来。&lt;/li&gt;
  &lt;li&gt;通过领导人的方式，Raft 将一致性问题分解成了三个相对独立的子问题
    &lt;ol&gt;
      &lt;li&gt;领导选举：一个新的领导人需要被选举出来，当现存的领导人宕机的时候&lt;/li&gt;
      &lt;li&gt;日志复制：领导人必须从客户端接收日志然后复制到集群中的其他节点，并且强制要求其他节点的日志保持和自己相同。&lt;/li&gt;
      &lt;li&gt;安全性：如果有任何的服务器节点已经应用了一个确定的日志条目到它的状态机中，那么其他服务器节点不能在同一个日志索引位置应用一个不同的指令。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;每一台服务有三种状态，领导者，跟随者，候选人&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;核心数据结构&quot;&gt;核心数据结构&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;state&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;state&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Persistent state on all servers(Updated on stable storage before responding to RPCs)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;currentTerm&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;latest term server has seen (initialized to 0  on first boot, increases monotonically)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;votedFor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;candidateId that received vote in current term (or null if none)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;log[]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;log entries; each entry contains command for state machine, and term when entry  was received by leader (first index is 1)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;state&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Volatile state on all servers&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;commitIndex&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;index of highest log entry known to be committed (initialized to 0, increases  monotonically)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lastApplied&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;index of highest log entry applied to state  machine (initialized to 0, increases  monotonically)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;state&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Volatile state on leaders(Reinitialized after election)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nextIndex[]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for each server, index of the next log entry to send to that server (initialized to leader last log index + 1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;matchIndex[]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for each server, index of highest log entry known to be replicated on server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(initialized to 0, increases monotonically)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;AppendEntries RPC.&lt;/li&gt;
  &lt;li&gt;Invoked by leader to replicate log entries; also used as heartbeat.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Arguments&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explain&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;term&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;leader’s term  leaderId so follower can redirect clients&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;prevLogIndex&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;index of log entry immediately preceding new ones&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;prevLogTerm&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;term of prevLogIndex entry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;entries[]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;log entries to store (empty for heartbeat; may send more than one for efficiency)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;leaderCommit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;leader’s commitIndex&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Results&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explain&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;term&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;currentTerm, for leader to update itself&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;success&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true if follower contained entry matching prevLogIndex  and prevLogTerm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Receiver implementation:
    &lt;ol&gt;
      &lt;li&gt;Reply false if term &amp;lt; currentTerm&lt;/li&gt;
      &lt;li&gt;Reply false if log doesn’t contain an entry at prevLogIndex  whose term matches prevLogTerm&lt;/li&gt;
      &lt;li&gt;If an existing entry conflicts with a new one (same index  but different terms),
delete the existing entry and all that  follow it&lt;/li&gt;
      &lt;li&gt;Append any new entries not already in the log&lt;/li&gt;
      &lt;li&gt;If leaderCommit &amp;gt; commitIndex, set commitIndex = min(leaderCommit, index of last new entry)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;RequestVote RPC  Invoked by candidates to gather votes.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Arguments&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explain&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;term&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;candidate’s term&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;candidateId&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;candidate requesting vote&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lastLogIndex&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;index of candidate’s last log entry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lastLogTerm&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;term of candidate’s last log entry&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Results&lt;/td&gt;
      &lt;td&gt;Explain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;term&lt;/td&gt;
      &lt;td&gt;currentTerm, for candidate to update itself&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;voteGranted&lt;/td&gt;
      &lt;td&gt;true means candidate received vote&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Receiver implementation:
    &lt;ol&gt;
      &lt;li&gt;Reply false if term &amp;lt; currentTerm&lt;/li&gt;
      &lt;li&gt;If votedFor is null or candidateId, and candidate’s log is at  least as up-to-date as receiver’s log, grant vote&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Rules for Servers&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;all-servers&quot;&gt;All Servers:&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;If commitIndex &amp;gt; lastApplied: increment lastApplied, apply  log[lastApplied] to state machine&lt;/li&gt;
  &lt;li&gt;If RPC request or response contains term T &amp;gt; currentTerm: set currentTerm = T, convert to follower
    &lt;h6 id=&quot;followers&quot;&gt;Followers:&lt;/h6&gt;
    &lt;p&gt;• Respond to RPCs from candidates and leaders
• If election timeout elapses without receiving AppendEntries
RPC from current leader or granting vote to candidate:
convert to candidate&lt;/p&gt;
    &lt;h6 id=&quot;candidates&quot;&gt;Candidates:&lt;/h6&gt;
    &lt;p&gt;• On conversion to candidate, start election:
• Increment currentTerm
• Vote for self
• Reset election timer
• Send RequestVote RPCs to all other servers
• If votes received from majority of servers: become leader
• If AppendEntries RPC received from new leader: convert to
follower
• If election timeout elapses: start new election&lt;/p&gt;
    &lt;h6 id=&quot;leaders&quot;&gt;Leaders:&lt;/h6&gt;
    &lt;p&gt;• Upon election: send initial empty AppendEntries RPCs
(heartbeat) to each server; repeat during idle periods to
prevent election timeouts
• If command received from client: append entry to local log,
respond after entry applied to state machine
• If last log index ≥ nextIndex for a follower: send
AppendEntries RPC with log entries starting at nextIndex
• If successful: update nextIndex and matchIndex for
follower
• If AppendEntries fails because of log inconsistency:
decrement nextIndex and retry
• If there exists an N such that N &amp;gt; commitIndex, a majority
of matchIndex[i] ≥ N, and log[N].term == currentTerm:
set commitIndex = N .&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;summary&quot;&gt;summary&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Election Safety&lt;/code&gt;: at most one leader can be elected in a
given term.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Leader Append-Only&lt;/code&gt;: a leader never overwrites or deletes
entries in its log; it only appends new entries. §5.3&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Log Matching&lt;/code&gt;: if two logs contain an entry with the same
index and term, then the logs are identical in all entries
up through the given index. §5.3&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Leader Completeness&lt;/code&gt;: if a log entry is committed in a
given term, then that entry will be present in the logs
of the leaders for all higher-numbered terms. §5.4&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;State Machine Safety&lt;/code&gt;: if a server has applied a log entry
at a given index to its state machine, no other server
will ever apply a different log entry for the same index.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Destributed" /><summary type="html">Raft</summary></entry><entry><title type="html">RabbitMQ实战—读书笔记</title><link href="http://localhost:4000/destributed/2017/06/14/rabbitMq.html" rel="alternate" type="text/html" title="RabbitMQ实战---读书笔记" /><published>2017-06-14T00:00:00+08:00</published><updated>2017-06-14T00:00:00+08:00</updated><id>http://localhost:4000/destributed/2017/06/14/rabbitMq</id><content type="html" xml:base="http://localhost:4000/destributed/2017/06/14/rabbitMq.html">&lt;h4 id=&quot;第1章-天将奇兵&quot;&gt;第1章 天将奇兵&lt;/h4&gt;
&lt;h4 id=&quot;第2章-理解消息通信&quot;&gt;第2章 理解消息通信&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;信道跟TCP连接。&lt;/li&gt;
  &lt;li&gt;交换器，队列，绑定。根据绑定规则将队列绑定到交换器上，消息是发布到交换器上的。有三种交换器：direct，fanout，topic。&lt;/li&gt;
  &lt;li&gt;基于消息的路由键和交换器类型，服务器会决定将消息投递到那个队列上。&lt;/li&gt;
  &lt;li&gt;rabbitMQ每一条消息都要返回确认消息，否则不会继续发送消息给该订阅者。&lt;/li&gt;
  &lt;li&gt;默认情况下重启RabbitMQ服务器，队列和交换器都消失了以及里面的消息。durable属性默认false。它决定了RabbitMQ是否需要在崩溃或者重启之后重新创建队列。&lt;/li&gt;
  &lt;li&gt;想要消息从RabbitMQ崩溃中恢复必须做到
    &lt;ol&gt;
      &lt;li&gt;把它的投递模式Delivery Mode 选项设置为2（持久）&lt;/li&gt;
      &lt;li&gt;发送到持久化的交换器&lt;/li&gt;
      &lt;li&gt;到达持久化的队列。
疑问：如果在持久化队列做持久化时候，宕机或者重启了，怎么办？&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;保证持久性消息能重启恢复的方式就是写入磁盘的持久化日志文件。一旦某条持久化消息被消费了，被标记为等待垃圾收集。&lt;/li&gt;
  &lt;li&gt;虚拟主机和隔离措施。&lt;/li&gt;
  &lt;li&gt;将信道设置成confirm模式控制事务。异步执行。消息没有回滚概念，失败重发。发送确认方式更加轻量级。同时对代理服务器的性能影响几乎忽略不计。&lt;/li&gt;
  &lt;li&gt;使用RabbitMQ核心流程
    &lt;ol&gt;
      &lt;li&gt;连接到RabbitMQ&lt;/li&gt;
      &lt;li&gt;获取信道&lt;/li&gt;
      &lt;li&gt;声明交换器&lt;/li&gt;
      &lt;li&gt;创建消息&lt;/li&gt;
      &lt;li&gt;发布消息&lt;/li&gt;
      &lt;li&gt;关闭信道&lt;/li&gt;
      &lt;li&gt;关闭连接&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&lt;/p&gt;</content><author><name></name></author><category term="Destributed" /><summary type="html">RabbitMQ实战---读书笔记</summary></entry><entry><title type="html">深入理解计算机系统3th—-读书笔记</title><link href="http://localhost:4000/cs/2017/06/01/computer-systems-3th.html" rel="alternate" type="text/html" title="深入理解计算机系统3th----读书笔记" /><published>2017-06-01T00:00:00+08:00</published><updated>2017-06-01T00:00:00+08:00</updated><id>http://localhost:4000/cs/2017/06/01/computer-systems-3th</id><content type="html" xml:base="http://localhost:4000/cs/2017/06/01/computer-systems-3th.html">&lt;h4 id=&quot;第1章-计算机系统漫游&quot;&gt;第1章 计算机系统漫游&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;小结:计算机系统是由硬件和系统软件组成的，它们共同写作以运行应用程序。
计算机内部的信息被表示为一组组的位，它们依据上下文有不同的解释方式。程序被其他程序翻译成不同的形式。
开始时是ASCII文本，然后被翻译器和链接器翻译成二进制可执行文件。
处理器读取并解释存放在主存里二进制指令。因为计算机花费了大量的时间在内存，I/O设备和CPU寄存器之间复制
数据，所以将系统中的存储设备划分成层次结构–CPU寄存器在顶部，接着是多层的硬件高速缓存存储器，DRAM主存和磁盘存储器
。在层次模型中，位于更高层的存储设备比低层次的存储设备更快 ，单位比特造价也更高。层次结构中较高层次的存储设备可以作为比较低层次设备的高速缓存。
操作系统内核是应用程序和硬件之间的媒介。它提供三个基本抽象:1,文件是对I/O设备的抽象 2.虚拟内存是对主内存和磁盘的抽象。3. 进程是处理器，主存和I/O设备的抽象。最后网络提供了计算机系统之间通信的手段，从特殊的角度来看，网络就是一种I/O设备。&lt;/li&gt;
  &lt;li&gt;Amdahl定律&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第一部分-程序结构和执行&quot;&gt;第一部分 程序结构和执行&lt;/h4&gt;
&lt;h5 id=&quot;第2章-信息的表示和处理&quot;&gt;第2章 信息的表示和处理&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;三种最重要的数字表示:无符号编码基于传统的二进制表示法，表示大于或者等于零的数字。补码编码是表示有符号整数的最常见的方式，有符号整数就可以为正或者为负的数字。浮点数编码是表示实数的科学计数法的以2为基数的版本。&lt;/li&gt;
  &lt;li&gt;信息的存储：8bit的块就是一个字节。每个程序对象简单理解为一个字节块，程序本身就是一个字节序列。&lt;/li&gt;
  &lt;li&gt;字数据大小：字长表示指针数据的标称大小，因为虚拟地址是以这样的字一个字来编码的。所以字长决定的最重要的系统参数就是虚拟地址空间的最大大小。&lt;/li&gt;
  &lt;li&gt;寻址和字节顺序：这个对象的地址是什么，以及在内存中如何排列这些字节。大端，小端&lt;/li&gt;
  &lt;li&gt;TODO 50-87&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;第3章-程序的机器级表示&quot;&gt;第3章 程序的机器级表示&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;gcc - S hello.c //产生汇编文件hello.s   gcc -C hello.c //产生目标代码文件，hello.o   objdump -d hello.o //反汇编&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="CS" /><summary type="html">深入理解计算机系统3th----读书笔记</summary></entry><entry><title type="html">Netflix—Hystrix文档翻译–01</title><link href="http://localhost:4000/destributed/2017/05/27/Netflix-Hystrix-01.html" rel="alternate" type="text/html" title="Netflix---Hystrix文档翻译--01" /><published>2017-05-27T00:00:00+08:00</published><updated>2017-05-27T00:00:00+08:00</updated><id>http://localhost:4000/destributed/2017/05/27/Netflix-Hystrix-01</id><content type="html" xml:base="http://localhost:4000/destributed/2017/05/27/Netflix-Hystrix-01.html">&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/How-To-Use&quot;&gt;Hystrix wiki &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/How-To-Use&quot;&gt;How-To-Use&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandHelloWorld&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HystrixCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HystrixCommandGroupKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ExampleGroup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// a real example would do work like a network call here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//另一种方式，使用HystrixObservableCommand替代HystrixCommand需要覆盖其构造方法。&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandHelloWorld&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HystrixObservableCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HystrixCommandGroupKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ExampleGroup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUnsubscribed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// a real example would do work like a network call here&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;同步执行--synchronous-execution&quot;&gt;同步执行  Synchronous Execution&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用HystrixCommand的方式时，可以运行execute()方法,以及对应的测试用例
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testSynchronous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Bob!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h5 id=&quot;hystrixobservablecommand-equivalent&quot;&gt;HystrixObservableCommand Equivalent&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;There is no simple equivalent to execute for a HystrixObservableCommand, but if you know that the Observable produced by such a command must always produce only a single value, you can mimic the behavior of execute by applying .toBlocking().toFuture().get() to the Observable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;异步执行-asynchronous-execution&quot;&gt;异步执行 Asynchronous Execution&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用HystrixCommand的方式时，queue()方法执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//获取结果&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testAsynchronous1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Bob!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testAsynchronous2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fBob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Bob!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fBob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;两种执行方式结果相同
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlighter&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;hystrixobservablecommand-equivalent-1&quot;&gt;HystrixObservableCommand Equivalent&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;There is no simple equivalent to queue for a HystrixObservableCommand, but if you know that the Observable produced by such a command must always produce only a single value, you can mimic the behavior of queue by applying the RxJava operators .toBlocking().toFuture() to the Observable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;非阻塞方式执行-reactive-execution&quot;&gt;非阻塞方式执行 Reactive Execution&lt;/h4&gt;</content><author><name></name></author><category term="Destributed" /><summary type="html">Netflix---Hystrix文档翻译--01</summary></entry></feed>