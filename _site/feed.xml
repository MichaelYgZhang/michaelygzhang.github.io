<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-10-03T17:55:42+08:00</updated><id>/</id><title>Michael</title><subtitle>Developer</subtitle><entry><title>Interview-1</title><link href="/interview/2016/10/03/interview-1.html" rel="alternate" type="text/html" title="Interview-1" /><published>2016-10-03T00:00:00+08:00</published><updated>2016-10-03T00:00:00+08:00</updated><id>/interview/2016/10/03/interview-1</id><content type="html" xml:base="/interview/2016/10/03/interview-1.html">&lt;p&gt;TODO&lt;/p&gt;</content><category term="Interview" /><summary>Interview-1</summary></entry><entry><title>HTTP权威指南-15</title><link href="/cs/2016/10/03/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-15.html" rel="alternate" type="text/html" title="HTTP权威指南-15" /><published>2016-10-03T00:00:00+08:00</published><updated>2016-10-03T00:00:00+08:00</updated><id>/cs/2016/10/03/HTTP权威指南-15</id><content type="html" xml:base="/cs/2016/10/03/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-15.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;报文时箱子，实体是货物&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;报文时箱子，实体是货物&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;报文实体由实体首部和实体主体组成，HTTP/1.1定义了以下几个基本实体首部字段&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Content-Type:实体中所承载的对象类型&lt;/li&gt;
  &lt;li&gt;Content-Length:所传输实体主体的长度或大小&lt;/li&gt;
  &lt;li&gt;Content-Language:与所传送对象最相配的人类语言&lt;/li&gt;
  &lt;li&gt;Content-Encoding:对象数据所做的任意变换&lt;/li&gt;
  &lt;li&gt;Content-Location:一个备用位置，请求时可通过它获取对象&lt;/li&gt;
  &lt;li&gt;Content-Range:如果这是部分实体，这个首部说明它是整体的哪个部分&lt;/li&gt;
  &lt;li&gt;Content-MD5:实体主体内容的校验和&lt;/li&gt;
  &lt;li&gt;Last-Modified:所传输内容在服务器上创建或最后修改的日期时间&lt;/li&gt;
  &lt;li&gt;Expires:实体数据将要实效的日期时间&lt;/li&gt;
  &lt;li&gt;Allow: 该资源所允许的各种请求方法&lt;/li&gt;
  &lt;li&gt;ETag: 该文档特定实例的唯一验证码&lt;/li&gt;
  &lt;li&gt;Cache-Control: 指出应该如何缓存该文档&lt;/li&gt;
&lt;/ol&gt;</content><category term="CS" /><summary>第十五 实体和编码</summary></entry><entry><title>HTTP权威指南-14</title><link href="/cs/2016/10/03/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-14.html" rel="alternate" type="text/html" title="HTTP权威指南-14" /><published>2016-10-03T00:00:00+08:00</published><updated>2016-10-03T00:00:00+08:00</updated><id>/cs/2016/10/03/HTTP权威指南-14</id><content type="html" xml:base="/cs/2016/10/03/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-14.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;保护HTTP的安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;http&quot;&gt;保护HTTP的安全&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP&lt;/th&gt;
      &lt;th&gt;应用层&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SSL or TLS&lt;/td&gt;
      &lt;td&gt;安全层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TCP&lt;/td&gt;
      &lt;td&gt;传输层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IP&lt;/td&gt;
      &lt;td&gt;网络层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网络接口&lt;/td&gt;
      &lt;td&gt;数据链路层&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;建立安全传输&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;建立安全的HTTP报文传输步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端域服务器端口443建立TCP连接HTTP的三次握手&lt;/li&gt;
  &lt;li&gt;SSL安全参数握手,包括:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;交换协议版本号&lt;/li&gt;
  &lt;li&gt;选择一个两端都了解的密码&lt;/li&gt;
  &lt;li&gt;对两端的身份进行认证&lt;/li&gt;
  &lt;li&gt;生成临时的会话密钥，以便加密信道&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;客户端在SSL上发送HTTP请求／在TCP上发送已加密的请求&lt;/li&gt;
  &lt;li&gt;服务器端在SSL上发送HTTP响应／在TCP上发送已加密的响应&lt;/li&gt;
  &lt;li&gt;SSL关闭通知&lt;/li&gt;
  &lt;li&gt;TCP连接关闭&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rf2818.txt&quot;&gt;HTTP安全性&lt;/a&gt;
&lt;a href=&quot;http://www.ietf.org/rfc/rf2246.txt&quot;&gt;SSL与TLS&lt;/a&gt;&lt;/p&gt;</content><category term="CS" /><summary>第十四 安全HTTP</summary></entry><entry><title>HTTP权威指南-9-10</title><link href="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-9-10.html" rel="alternate" type="text/html" title="HTTP权威指南-9-10" /><published>2016-10-02T00:00:00+08:00</published><updated>2016-10-02T00:00:00+08:00</updated><id>/cs/2016/10/02/HTTP权威指南-9-10</id><content type="html" xml:base="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-9-10.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#web&quot; id=&quot;markdown-toc-web&quot;&gt;第九章 Web机器人&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;爬虫及爬行方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;机器人的HTTP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;行为不当的机器人&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;拒绝机器人访问&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;搜索引擎&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-ng-&quot; id=&quot;markdown-toc-http-ng-&quot;&gt;第十章 HTTP-NG 下一代系统&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#http-1&quot; id=&quot;markdown-toc-http-1&quot;&gt;HTTP发展中存在的问题&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#modularize-and-enhance&quot; id=&quot;markdown-toc-modularize-and-enhance&quot;&gt;模块化及功能增强(modularize and enhance)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;第九章 Web机器人&lt;/h4&gt;
&lt;h5 id=&quot;section&quot;&gt;爬虫及爬行方式&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;从哪儿开始: 根集&lt;/li&gt;
  &lt;li&gt;链接的提取以及相对链接的标准化&lt;/li&gt;
  &lt;li&gt;避免环路出现&lt;/li&gt;
  &lt;li&gt;循环与复制&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ 如果爬虫不断地获取相同的页面时，并且爬虫与服务器连接良好，它就可能会阻止其他真实用户的访问，这种拒绝服务是可以作为法律诉讼理由的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;面包屑留下的痕迹;大规模Web爬虫对其访问地址进行管理时使用以下相关技术点:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;树和散列表(加速URL查找)&lt;/li&gt;
  &lt;li&gt;有损的存在位图(减小空间)&lt;/li&gt;
  &lt;li&gt;检查点(将已访问URL列表存在硬盘上，防止机器人程序崩溃)&lt;/li&gt;
  &lt;li&gt;分类&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;别名与机器人环路&lt;/li&gt;
  &lt;li&gt;规范化URL&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;如果没有指定端口的话，就向主机名中添加 ‘80’&lt;/li&gt;
  &lt;li&gt;将所有转义符 %xx 都转换成等价字符&lt;/li&gt;
  &lt;li&gt;删除 # 标签&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;文件系统连接环路 ‘/’&lt;/li&gt;
  &lt;li&gt;动态虚拟Web空间&lt;/li&gt;
  &lt;li&gt;避免循环和重复&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;规范化URL&lt;/li&gt;
    &lt;li&gt;广度优先的爬行&lt;/li&gt;
    &lt;li&gt;节流&lt;/li&gt;
    &lt;li&gt;限制URL的大小&lt;/li&gt;
    &lt;li&gt;URL/站点黑名单&lt;/li&gt;
    &lt;li&gt;模式检测&lt;/li&gt;
    &lt;li&gt;内容指纹&lt;/li&gt;
    &lt;li&gt;人工监视&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;http&quot;&gt;机器人的HTTP&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;识别请求首部&lt;/li&gt;
  &lt;li&gt;虚拟主机，实现机器人要支持Host首部&lt;/li&gt;
  &lt;li&gt;条件请求&lt;/li&gt;
  &lt;li&gt;对响应的处理;需要识别比如状态码，实体等&lt;/li&gt;
  &lt;li&gt;User-agent导向&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;行为不当的机器人&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;失控机器人&lt;/li&gt;
  &lt;li&gt;实效的URL&lt;/li&gt;
  &lt;li&gt;很长的错误URL&lt;/li&gt;
  &lt;li&gt;爱打听的机器人&lt;/li&gt;
  &lt;li&gt;动态网关访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;拒绝机器人访问&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;拒绝机器人访问标准; Dissallow/Allow&lt;/li&gt;
  &lt;li&gt;Web站点和robots.txt文件&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;User-agent: &lt;robot-name&gt;&lt;/robot-name&gt;&lt;/li&gt;
    &lt;li&gt;Dissallow&lt;/li&gt;
    &lt;li&gt;Allow&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;缓存和robots.txt的过期&lt;/li&gt;
  &lt;li&gt;HTML的robot-control元标签&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;搜索引擎&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://www.robotstxt.org&quot;&gt;Web机器人&lt;/a&gt;
&lt;a href=&quot;http://www.searchengineworld.com&quot;&gt;搜索引擎世界&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;http-ng-&quot;&gt;第十章 HTTP-NG 下一代系统&lt;/h4&gt;
&lt;h5 id=&quot;http-1&quot;&gt;HTTP发展中存在的问题&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;复杂性&lt;/li&gt;
  &lt;li&gt;扩展性&lt;/li&gt;
  &lt;li&gt;性能&lt;/li&gt;
  &lt;li&gt;传输依赖性&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;modularize-and-enhance&quot;&gt;模块化及功能增强(modularize and enhance)&lt;/h6&gt;</content><category term="CS" /><summary>第九章 Web机器人; 第十章 HTTP-NG</summary></entry><entry><title>HTTP权威指南-8</title><link href="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-8.html" rel="alternate" type="text/html" title="HTTP权威指南-8" /><published>2016-10-02T00:00:00+08:00</published><updated>2016-10-02T00:00:00+08:00</updated><id>/cs/2016/10/02/HTTP权威指南-8</id><content type="html" xml:base="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-8.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;网关&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;资源网关&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web&quot; id=&quot;markdown-toc-web&quot;&gt;应用程序接口和Web服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;隧道&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;中继&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;网关&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;网关:协议转换器&lt;/li&gt;
  &lt;li&gt;客户端和服务器端网关&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;客户端协议&amp;gt;/&amp;lt;服务器端协议&amp;gt;&lt;/code&gt;;服务器端网关就是:HTTP/&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;;客户端网关:&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;/HTTP;&lt;/li&gt;
  &lt;li&gt;协议网关&lt;/li&gt;
  &lt;li&gt;HTTPS/HTTP服务器端安全网关&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;资源网关&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;CGI(Common Getway Interface),为每个请求创建一个新进程，开销比较高，服务器负载大。&lt;/li&gt;
  &lt;li&gt;服务器扩展API&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;web&quot;&gt;应用程序接口和Web服务&lt;/h5&gt;

&lt;h5 id=&quot;section-2&quot;&gt;隧道&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Web隧道允许用户通过HTTP连接发送非HTTP流量，这样就可以在HTTP上捎带其他协议数据了，使用Web隧道最常见的原因就是要在HTTP连接中嵌入非HTTP流量，这样，这类流量就可以穿过只允许Web流量通过的防火墙了。&lt;/li&gt;
  &lt;li&gt;使用CONNECT建立HTTP隧道&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;请求建立一条&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SSL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;隧道:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;CONNECT&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;响应:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Established&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Netscape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;与普通&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;响应不同，这个响应并不需要包含&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;首部，此时连接只是对原始字节进行转接，不再是报文的承载着，所以不需要使用内容类型了。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;数据隧道、定时及连接管理&lt;/li&gt;
  &lt;li&gt;隧道认证&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;中继&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;中继(relay)是没有完全遵循HTTP规范的简单HTTP代理，中继负责处理HTTP中建立连接的部分，然后对字节进行盲转发。&lt;/li&gt;
  &lt;li&gt;简单盲中继实现中存在一个问题，就是他们无法正确处理Connection首部，所以有潜在的刮起keep-alive连接的可能。&lt;/li&gt;
&lt;/ul&gt;</content><category term="CS" /><summary>第八章 网关、隧道及中继</summary></entry><entry><title>HTTP权威指南-7</title><link href="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-7.html" rel="alternate" type="text/html" title="HTTP权威指南-7" /><published>2016-10-02T00:00:00+08:00</published><updated>2016-10-02T00:00:00+08:00</updated><id>/cs/2016/10/02/HTTP权威指南-7</id><content type="html" xml:base="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-7.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;缓存&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;冗余的数据传输&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;带宽瓶颈&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;瞬间拥塞&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;距离时延&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;命中和未命中的&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;缓存的拓扑结构&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;缓存的处理步骤&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;控制缓存的能力&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;缓存&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;使用缓存的优点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;减少冗余的数据传输，节省了你的网络费用&lt;/li&gt;
    &lt;li&gt;缓解了网络瓶颈的问题，不需要更多的带宽就能够更快地加载页面&lt;/li&gt;
    &lt;li&gt;降低了对原始服务器的要求，服务器可以更快地响应，避免过载的出现&lt;/li&gt;
    &lt;li&gt;降低了距离时延，因为从较远的地方加载页面会更慢一些&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;section-1&quot;&gt;冗余的数据传输&lt;/h5&gt;
&lt;p&gt;服务器多次传输同一份文档，每次传输给一个客户端，相同的字节在网络中一遍遍地传输，造成冗余，缓存可以很好解决这个问题。&lt;/p&gt;
&lt;h5 id=&quot;section-2&quot;&gt;带宽瓶颈&lt;/h5&gt;
&lt;p&gt;缓存可以缓解网络带宽瓶颈问题。&lt;/p&gt;
&lt;h5 id=&quot;section-3&quot;&gt;瞬间拥塞&lt;/h5&gt;
&lt;p&gt;缓存在破坏瞬间拥塞时显得非常重要，比如突发事件，使很多人几乎同时访问一个Web文档时，就会出现瞬间拥塞，由此造成Web服务器负载过高甚至崩溃。&lt;/p&gt;
&lt;h5 id=&quot;section-4&quot;&gt;距离时延&lt;/h5&gt;
&lt;p&gt;即便带宽不是问题，距离也可能是问题的原因，没太网络路由器都会增加因特网流量的时延，即使没有太多路由器，光速本身也会造成显著的时延。&lt;/p&gt;
&lt;h5 id=&quot;section-5&quot;&gt;命中和未命中的&lt;/h5&gt;
&lt;p&gt;可以用已有副本为某些到达缓存的请求提供服务，被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;缓存命中&lt;/code&gt;，亦或请求的资源在缓存服务器上不存在，而将请求转发给原始服务器被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;缓存未命中&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;再验证以保持缓存的”新鲜度”，在缓存服务器向源服务器发送请求的首部加上If-Modified-Since首部，告诉源服务器只有在缓存了对象的副本之后，又对其进行了修改的情况下，才发送此对象。
    &lt;ol&gt;
      &lt;li&gt;再验证命中(如果服务器对象未被修改，服务器想客户端发送一个小的HTTP304Not Modified响应)&lt;/li&gt;
      &lt;li&gt;再验证未命中(如果服务器对象与已缓存副本不同，则向客户端发送一条普通的，带有完整内容的HTTP 200 OK响应)&lt;/li&gt;
      &lt;li&gt;对象被删除(如果服务器对象已经被删除了，服务器回送一个404 Not Found响应，缓存也会将其副本删除)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;命中率&lt;/li&gt;
  &lt;li&gt;字节命中率&lt;/li&gt;
  &lt;li&gt;区分命中和未命中的情况(根据Date首部，若响应日期比较早，则为缓存响应)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-6&quot;&gt;缓存的拓扑结构&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;私有缓存(比如浏览器缓存)&lt;/li&gt;
  &lt;li&gt;公有代理缓存或者称为代理缓存&lt;/li&gt;
  &lt;li&gt;代理缓存的层次结构&lt;/li&gt;
  &lt;li&gt;网状缓存、内容路由以及对等缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-7&quot;&gt;缓存的处理步骤&lt;/h5&gt;
&lt;p&gt;对一条HTTP GET报文的基本缓存处理过程包括7个步骤:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;接收－缓存从网络中读取抵达的请求报文。&lt;/li&gt;
  &lt;li&gt;解析－缓存对报文进行解析，提取出URL和各种首部。&lt;/li&gt;
  &lt;li&gt;查询－缓存查看是否本地有副本可用，如果没有，就获取一份并缓存本地&lt;/li&gt;
  &lt;li&gt;新鲜度检测－缓存查看已缓存副本是否足够新鲜，如果不是，就询问源服务器是否有任何更新。&lt;/li&gt;
  &lt;li&gt;创建响应－缓存会用新的首部和已缓存的主体来构建一条响应报文&lt;/li&gt;
  &lt;li&gt;发送－缓存通过网络将响应发回给客户端&lt;/li&gt;
  &lt;li&gt;日志－缓存可选地创建一个日志文件条目来描述这个事务&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;文档过期设置(Cache-Control: max-age=3600&lt;code class=&quot;highlighter-rouge&quot;&gt;指定最大使用期限以秒为单位&lt;/code&gt;; Expires: Fri, 05 Jul 2002, 05:00:00 GMT&lt;code class=&quot;highlighter-rouge&quot;&gt;指定一个绝对的过期日期&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;服务器再验证&lt;/li&gt;
  &lt;li&gt;在请求报文中添加用条件方法进行再验证
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;If-Modified-Since:&lt;date&gt;&lt;/date&gt;&lt;/li&gt;
        &lt;li&gt;If-None-Match:&lt;tags&gt;&lt;/tags&gt;&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-8&quot;&gt;控制缓存的能力&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;服务器可以通过HTTP定义的几种方式来指定在文档过期之前可以将其缓存多长时间，按照优先级递减的顺序。服务器可以:
    &lt;ol&gt;
      &lt;li&gt;附加一个Cache-Control: no-store 首部到响应中去;&lt;/li&gt;
      &lt;li&gt;附加一个Cache-Control: no-cache 首部到响应中去;&lt;/li&gt;
      &lt;li&gt;附加一个Cache-Control: must-revalidate 首部到响应中去;&lt;/li&gt;
      &lt;li&gt;附加一个Cache-Control: max-age 首部到响应中去;&lt;/li&gt;
      &lt;li&gt;附加一个Expires 日期首部到响应中去;&lt;/li&gt;
      &lt;li&gt;不附加过期信息，让缓存确定自己的过期日期;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;客户端的新鲜度限制&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;指令&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;目的&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cache-Control: max-fresh = &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;至少在未来&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s&amp;gt;&lt;/code&gt;秒内文档要保持新鲜。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cache-Control: max-age = &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;缓存无法返回缓存时间长于&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s&amp;gt;&lt;/code&gt;秒的文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cache-Control: no-cache&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;除非资源进行再验证，否则这个客户端不会接受已缓存的资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cache-Control: no-store&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;缓存应尽快从存储器中删除文档的所有痕迹，因为其中可能会包含敏感信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cache-Control: only-if-cached&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;只有当缓存中有副本存在时，客户端才会获取一份副本&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><category term="CS" /><summary>第七章 缓存</summary></entry><entry><title>HTTP权威指南-12-13</title><link href="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-12-13.html" rel="alternate" type="text/html" title="HTTP权威指南-12-13" /><published>2016-10-02T00:00:00+08:00</published><updated>2016-10-02T00:00:00+08:00</updated><id>/cs/2016/10/02/HTTP权威指南-12-13</id><content type="html" xml:base="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-12-13.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;第十二章 基本认证机制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;第十三章 摘要认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;第十二章 基本认证机制&lt;/h4&gt;

&lt;p&gt;认证的四个步骤:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;步骤&lt;/th&gt;
      &lt;th&gt;首部&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
      &lt;th&gt;方法/状态&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;请求&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;第一条没有请求认证信息&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;质询&lt;/td&gt;
      &lt;td&gt;WWW-Authenticate&lt;/td&gt;
      &lt;td&gt;服务器用401状态拒绝了请求，说明需要用户提供用户名和密码&lt;/td&gt;
      &lt;td&gt;401 Unauthorized&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;授权&lt;/td&gt;
      &lt;td&gt;Authorization&lt;/td&gt;
      &lt;td&gt;客户端重新发出请求，但这次会附加一个Authorization首部，用来说明认证算法、用户名和密码&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;成功&lt;/td&gt;
      &lt;td&gt;Authorization-Info&lt;/td&gt;
      &lt;td&gt;如果授权证书正确，服务器会将文档返回，有些授权算法会在可选的Authorization-Info首部返回一些与授权会话相关的附加信息&lt;/td&gt;
      &lt;td&gt;200 OK&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;⚠️基本认证中不包括Authorization-Info首部&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基本认证的安全缺陷&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本认证会通过网络发送用户名和密码，这些用户名和密码都是以一种很容易的解码的形式表示的。&lt;/li&gt;
  &lt;li&gt;即使密码是以更难解码的方式加密的，第三方用户仍然可以捕获被修改过的用户名和密码，并将修改过的用户名和密码一次次重放给原始服务器，以获取服务器访问授权，没有什么措施可以用来防止重放攻击。&lt;/li&gt;
  &lt;li&gt;即使将基本认证用于一些不太重要的的应用程序，一些不良习惯也会让它变得危险。比如很多用户的很多账号都是用相同的密码，若某些恶徒先获取了基本认证的密码然后尝试某些重要的在线银行网站!&lt;/li&gt;
  &lt;li&gt;基本认证没有提供任何针对代理和作为中间人的中间节点的防护措施，他们没有修改认证首部，但却修改了报文的其余部分，这样就严重地改变了事务的本质。&lt;/li&gt;
  &lt;li&gt;假冒服务器 很容易骗过基本认证。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本认证与加密数据传输(比如SSL)配合使用，会使基本认证变得更加安全。这是一种常用技巧。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;第十三章 摘要认证&lt;/h4&gt;

&lt;p&gt;在基本认证的基础上添加了更多的限制条件。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端发起GET请求&lt;/li&gt;
  &lt;li&gt;服务器产生随机数WWW-Authenticate质询，服务器发送域随机数和算法&lt;/li&gt;
  &lt;li&gt;客户端从算法集中选择一个算法产生响应摘要及客户端随机数，Authorization作为向服务器的请求。&lt;/li&gt;
  &lt;li&gt;服务器对摘要进行认证，并产生下一个随机数，返回客户端Authorization-Info信息及下一个需要认证时发送的随机数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;⚠️:摘要认证还有很多安全性相关的技巧&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2617.txt&quot;&gt;更多认证信息&lt;/a&gt;&lt;/p&gt;</content><category term="CS" /><summary>第十二章 基本认证机制; 第十三章 摘要认证</summary></entry><entry><title>HTTP权威指南-11</title><link href="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-11.html" rel="alternate" type="text/html" title="HTTP权威指南-11" /><published>2016-10-02T00:00:00+08:00</published><updated>2016-10-02T00:00:00+08:00</updated><id>/cs/2016/10/02/HTTP权威指南-11</id><content type="html" xml:base="/cs/2016/10/02/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-11.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#cookie&quot; id=&quot;markdown-toc-cookie&quot;&gt;第十一章 客户端识别与Cookie机制&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;HTTP用户识别机制&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#http-1&quot; id=&quot;markdown-toc-http-1&quot;&gt;HTTP首部&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-1&quot; id=&quot;markdown-toc-cookie-1&quot;&gt;Cookie&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-&quot; id=&quot;markdown-toc-cookie-&quot;&gt;Cookie 与缓存&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-2&quot; id=&quot;markdown-toc-cookie-2&quot;&gt;Cookie安全性和隐私&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cookie&quot;&gt;第十一章 客户端识别与Cookie机制&lt;/h4&gt;
&lt;h5 id=&quot;http&quot;&gt;HTTP用户识别机制&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;承载用户身份信息的HTTP首部&lt;/li&gt;
  &lt;li&gt;客户端IP地址跟踪，通过用户的IP地址对其进行识别&lt;/li&gt;
  &lt;li&gt;用户登陆，用认证方式来识别用户&lt;/li&gt;
  &lt;li&gt;胖URL一种在URL中嵌入识别信息的技术&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;http-1&quot;&gt;HTTP首部&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;承载用户相关信息的HTTP首部&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;首部名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;首部类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;From&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请求&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户的E-mail地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User-Agent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请求&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户的浏览器软件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Referer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请求&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户是这个页面上依照链接跳转过来的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Authorization&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请求&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户名和密码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Client-IP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展(请求)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;客户端IP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X-Forwarded-For&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展(请求)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;客户端IP地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cookie&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展(请求)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;服务器产生的ID标签&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&quot;cookie-1&quot;&gt;Cookie&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Cookie类型:会话cookie(临时的一般关闭浏览器时删除)和持久cookie(存在硬盘中)&lt;/li&gt;
  &lt;li&gt;Cookie成分&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Set-Cookie属性&lt;/th&gt;
      &lt;th&gt;描述及实例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NAME = VALUE&lt;/td&gt;
      &lt;td&gt;强制的,都是字符序列，可以创建任意NAME＝VALUE关联;Set-Cookie: customer=Mary&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expires&lt;/td&gt;
      &lt;td&gt;可选，指定一个到期日期，格式为:Weekday, DD-Mon-YY HH:MM:SS GMT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain&lt;/td&gt;
      &lt;td&gt;可选,浏览器只向指定域名的服务器主机发送cookie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Path&lt;/td&gt;
      &lt;td&gt;可选，可以为服务器上特定的文档分配cookie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Secure&lt;/td&gt;
      &lt;td&gt;可选，只有HTTP使用了SSL安全连接时才会发送cookie;Set-Cookie: private_id =113; secure&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&quot;cookie-&quot;&gt;Cookie 与缓存&lt;/h6&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h6 id=&quot;cookie-2&quot;&gt;Cookie安全性和隐私&lt;/h6&gt;

&lt;p&gt;⚠️当用户禁用cookie时，可以通过胖URL达到跟踪用户状态的目的。&lt;/p&gt;</content><category term="CS" /><summary>第十一章 客户端识别与Cookie机制</summary></entry><entry><title>HTTP权威指南-5-6</title><link href="/cs/2016/10/01/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-5-6.html" rel="alternate" type="text/html" title="HTTP权威指南-5-6" /><published>2016-10-01T00:00:00+08:00</published><updated>2016-10-01T00:00:00+08:00</updated><id>/cs/2016/10/01/HTTP权威指南-5-6</id><content type="html" xml:base="/cs/2016/10/01/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-5-6.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#web&quot; id=&quot;markdown-toc-web&quot;&gt;第五章Web服务器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;第六章代理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#web-1&quot; id=&quot;markdown-toc-web-1&quot;&gt;Web的中间实体&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;为什么使用代理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;代理去往何处&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;客户端的代理设置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;与代理请求有关的一些棘手问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;追踪报文&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;代理认证&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;代理的互操作性&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;第五章Web服务器&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Web服务器处理请求的响应步骤
    &lt;ol&gt;
      &lt;li&gt;建立连接－接受一个/多个客户端的连接&lt;/li&gt;
      &lt;li&gt;接收请求－从网络中读取一条HTTP请求报文&lt;/li&gt;
      &lt;li&gt;处理请求－对请求报文进行解析，并采取行动&lt;/li&gt;
      &lt;li&gt;访问资源－访问报文中指定的资源&lt;/li&gt;
      &lt;li&gt;构建响应－创建带有正确首部的HTTP响应报文&lt;/li&gt;
      &lt;li&gt;发送响应－将响应回送给客户端&lt;/li&gt;
      &lt;li&gt;记录事务的处理过程－将已完成事务有关的内容记录在一个日志文件中。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;第六章代理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Web代理(proxy)服务器是网络的中间实体，位于客户端和服务器之间扮演’中间人’的角色，在各断点之间来回传送HTTP报文。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;web-1&quot;&gt;Web的中间实体&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;私有和共享代理&lt;/li&gt;
  &lt;li&gt;代理与网关的比较
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;代理:连接的是两个或多个使用&lt;code class=&quot;highlighter-rouge&quot;&gt;相同协议&lt;/code&gt;的应用程序&lt;/li&gt;
        &lt;li&gt;网关:连接的则是两个或多个使用&lt;code class=&quot;highlighter-rouge&quot;&gt;不同协议&lt;/code&gt;的端点，网关扮演&lt;code class=&quot;highlighter-rouge&quot;&gt;协议转换器&lt;/code&gt;的角色&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;为什么使用代理&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;网站访问过滤&lt;/li&gt;
  &lt;li&gt;文档访问权限控制&lt;/li&gt;
  &lt;li&gt;安全防火墙&lt;/li&gt;
  &lt;li&gt;Web缓存&lt;/li&gt;
  &lt;li&gt;反向代理&lt;/li&gt;
  &lt;li&gt;内容路由&lt;/li&gt;
  &lt;li&gt;转码器&lt;/li&gt;
  &lt;li&gt;匿名者&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;代理去往何处&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;代理服务器的部署
    &lt;ol&gt;
      &lt;li&gt;出口代理&lt;/li&gt;
      &lt;li&gt;访问(入口)代理&lt;/li&gt;
      &lt;li&gt;反向代理(取代原始服务器的代理服务器)&lt;/li&gt;
      &lt;li&gt;网络交换代理&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;代理的层次结构(动态选择父子层次结构)
    &lt;ol&gt;
      &lt;li&gt;负载均衡&lt;/li&gt;
      &lt;li&gt;地理位置附近的路由&lt;/li&gt;
      &lt;li&gt;协议/类型路由&lt;/li&gt;
      &lt;li&gt;基于订购的路由&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;代理是如何获取流量的
    &lt;ol&gt;
      &lt;li&gt;修改Web客户端&lt;/li&gt;
      &lt;li&gt;修改网络(拦截代理)拦截代理被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;透明代理&lt;/code&gt;因为你会在不知情的情况下连接到这些代理上去，但HTTP规范中已用”透明”来表示那些不会对语义进行修改的功能了，所以标准指定机构建议在流量捕获中使用术语&lt;code class=&quot;highlighter-rouge&quot;&gt;拦截&lt;/code&gt;，这里采纳了这一术语。&lt;/li&gt;
      &lt;li&gt;修改DNS命名空间&lt;/li&gt;
      &lt;li&gt;修改Web服务器&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;客户端的代理设置&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;手工配置&lt;/li&gt;
  &lt;li&gt;预先配置浏览器&lt;/li&gt;
  &lt;li&gt;代理的自动配置&lt;/li&gt;
  &lt;li&gt;WPAD(Web Proxy Autodiscovery Protocol)的代理发现;⚠️目前只有IE支持这一特性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-4&quot;&gt;与代理请求有关的一些棘手问题&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;代理URI与服务器URI的不同(没有设置客户端使用代理时，它会发送部分URI。设置客户端使用代理时，它会发送完整URI)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;服务器请求&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperBrowser&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;显示&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;配置了代理请求&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//www.example.com/index.html HTTP/1.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperBrowser&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;替代物，反向代理&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;服务器主机名指向替代物代理&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperBrowser&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;拦截代理请求&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperBrowser&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;代理既可以处理代理请求，也可以处理服务器请求&lt;/li&gt;
  &lt;li&gt;转发过程中对URI的修改(HTTP规范禁止一般的拦截代理在转发URI时重写其绝对路径，唯一的例外是可以用”/”来取代空路径)&lt;/li&gt;
  &lt;li&gt;URI的客户端自动扩张和主机名解析&lt;/li&gt;
  &lt;li&gt;没有代理时URI的解析，没有提供显示的代理时，浏览器会对部分主机名进行自动扩展。&lt;/li&gt;
  &lt;li&gt;有显示代理时URI的解析，有显示设置代理时浏览器不会对不完整的主机名进行自动扩展，因此当用户在地址栏窗口中输入oreilly时，发给代理的就是http://oreilly/(浏览器添加了默认的方案和路径，但主机名和输入的一样)&lt;/li&gt;
  &lt;li&gt;有拦截代理时URI的解析&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-5&quot;&gt;追踪报文&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Via首部(它列出了报文途径的每个中间节点(代理或网关)有关的信息，报文每经过一个节点，都必须将这个中间节点添加到Via列表的末尾),比如以下Via字符串告诉我们报文经过两个代理，以及分别实现的协议版本。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Via: 1.1 proxy-62.irenes-isp.net, 1.0 cacahe.joes-hardware.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;响应Via通常与请求Via相反，比如请求是:’Via: 1.1 A, 1.0 B, 1.1 C’则响应是:’Via: 1.1 C, 1.0 B, 1.1 A’&lt;/li&gt;
  &lt;li&gt;Via与网关,有些代理会为使用非HTTP协议的服务器提供网关功能。Via首部会记录这些协议转换。&lt;/li&gt;
  &lt;li&gt;Via的隐私和安全问题&lt;/li&gt;
  &lt;li&gt;TRACE方法，HTTP/1.1的TRACE方法，用户可以追踪经代理链传输的请求报文，观察报文经过了哪些代理，以及每个代理是如果对请求报文进行修改的。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;TRACE&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;请求&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;TRACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;TRACE&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;响应:响应首部&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;为&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;状态&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Coontent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;269&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Via&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;att&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;irenes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;TRACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Via&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;irenes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;att&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以使用Max-Forwards添加到首部限制最大转发次数&lt;/p&gt;

&lt;h5 id=&quot;section-6&quot;&gt;代理认证&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Proxy Authorization
    &lt;h5 id=&quot;section-7&quot;&gt;代理的互操作性&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;OPTIONS: 发现对可选特性的支持&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;OPTIONS * HTTP/1.1 表示请求的整个服务器所支持的功能&lt;/li&gt;
    &lt;li&gt;OPTIONS http://www.example.com/index.html HTTP/1.1 表示具体特定资源的可用特性&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Allow首部，列出请求URI标识资源所支持的方法列表。也可以将Allow首部作为请求首部，建议在新建资源上支持某些方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OPTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TRACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OPTIONS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_server&quot;&gt;Proxy-Server wiki&lt;/a&gt;&lt;/p&gt;</content><category term="CS" /><summary>第五章-Web服务器;第六章-代理</summary></entry><entry><title>HTTP权威指南-4</title><link href="/cs/2016/09/29/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-4.html" rel="alternate" type="text/html" title="HTTP权威指南-4" /><published>2016-09-29T00:00:00+08:00</published><updated>2016-09-29T00:00:00+08:00</updated><id>/cs/2016/09/29/HTTP权威指南-4</id><content type="html" xml:base="/cs/2016/09/29/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-4.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp&quot; id=&quot;markdown-toc-tcp&quot;&gt;TCP连接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-1&quot; id=&quot;markdown-toc-tcp-1&quot;&gt;对TCP性能的考虑&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;HTTP连接的处理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;并行连接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;持久连接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;管道化连接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;关闭连接的奥秘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp&quot;&gt;TCP连接&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;TCP的可靠数据管道&lt;/li&gt;
  &lt;li&gt;TCP流是分段的、由IP分组传送。(TCP的数据是通过名为IP分组或者IP数据报的小数据块来发送的)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTTP与HTTPS&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP&lt;/th&gt;
      &lt;th&gt;应用层&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TCP&lt;/td&gt;
      &lt;td&gt;传输层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IP&lt;/td&gt;
      &lt;td&gt;网络层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网络接口&lt;/td&gt;
      &lt;td&gt;数据链路层&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP&lt;/th&gt;
      &lt;th&gt;应用层&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TSL or SSL&lt;/td&gt;
      &lt;td&gt;安全层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TCP&lt;/td&gt;
      &lt;td&gt;传输层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IP&lt;/td&gt;
      &lt;td&gt;网络层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网络接口层&lt;/td&gt;
      &lt;td&gt;数据链路层&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;保持TCP连接持续不断地运行(TCP通过端口号保持所有持续运行的TCP连接)，TCP连接通过4个值来识别&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;源IP地址、源端口号、目的IP地址、目的端口号&amp;gt;&lt;/code&gt;进而一起定义唯一的一条连接。&lt;/li&gt;
  &lt;li&gt;使用TCP套接字编程&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;套接字API调用&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;s = socket(&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;parameters&amp;gt;&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;创建一个新的、未命名、未关联的套接字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bind(s,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;local IP:port&amp;gt;&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;向套接字赋一个本地端口号和接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;connect(s, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;remote IP:port&amp;gt;&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;创建一条连接本地套接字与远程主机及端口的连接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;listen(s,….)&lt;/td&gt;
      &lt;td&gt;标识一个本地套接字，使其可以合法接受连接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s2 = accept(s)&lt;/td&gt;
      &lt;td&gt;等待某人建立一条到本地端口的连接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n = read(s, buffer, n)&lt;/td&gt;
      &lt;td&gt;尝试从套接字向缓冲区读取n个字节&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n = write(s, buffer, n)&lt;/td&gt;
      &lt;td&gt;尝试从缓冲区中向套接字写入n个字节&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;close(s)&lt;/td&gt;
      &lt;td&gt;完全关闭TCP连接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shutdown(s, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;side&amp;gt;&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;只关闭TCP连接的输入或输出端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getsockopt(s,…)&lt;/td&gt;
      &lt;td&gt;读取某个内部套接字配置选项值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;setsockopt(s,…)&lt;/td&gt;
      &lt;td&gt;修改某个内部套接字配置选项值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;tcp-1&quot;&gt;对TCP性能的考虑&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP事务的时延&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;客户端首选需要根据URL确定Web服务器的IP地址和端口号，如果最近没有对URL中的主机名进行访问，通过DNS解析系统将URL中的主机名转换成一个IP地址可能需要花费数十秒的时间&lt;/li&gt;
    &lt;li&gt;客户端会向服务器发送一条TCP连接请求，并等待服务器回送一个请求接受应答，每条新的TCP连接都会有连接时延，这个值通常最多只有一两秒钟，但如果数百个HTTP事务的话，这个值会快速地叠加上去。&lt;/li&gt;
    &lt;li&gt;一旦连接建立起来了，客户端就会通过新建立的TCP管道来发送HTTP请求，数据到达时，Web服务器会从TCP连接中读取请求报文，并对请求进行处理，网络传输请求报文以及服务器处理请求报文都需要时间。&lt;/li&gt;
    &lt;li&gt;Web服务器会会送HTTP响应，这也需要花费时间。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;总结:这些TCP网络时延的大小取决于硬件速度，网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。TCP协议技术的复杂性也会对时延产生巨大对影响。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;性能聚集区域&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;TCP连接建立握手&lt;/li&gt;
    &lt;li&gt;TCP慢启动拥塞控制&lt;/li&gt;
    &lt;li&gt;数据聚集的Nagle算法&lt;/li&gt;
    &lt;li&gt;用于捎带确认的TCP延迟确认算法&lt;/li&gt;
    &lt;li&gt;TIME_WAIT时延和端口耗尽&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;TCP连接的握手时延(SYN/SYN+ACK三次握手)SYN是一种标记，表明是连接请求&lt;/li&gt;
  &lt;li&gt;延迟确认&lt;/li&gt;
  &lt;li&gt;TCP慢启动‘自动调谐’&lt;/li&gt;
  &lt;li&gt;Nagle算法与TCP_NODELAY(每个TCP段至少装载40个字节的标记和首部，如果TCP发送了大量包含少量数据的分组，网络性能就会严重下降，这种行为称为”发送端傻窗口综合症”;Nagle算法就是试图在发送一个分组之前，将大量TCP数据绑定在一起，以提高效率。可以在栈中设置参数TCP_NODELAY来禁用Nagle算法，如果需要这么做一定要确保会向TCP写入大块的数据，这样就不会产生一堆小分组了)&lt;/li&gt;
  &lt;li&gt;TIME_WAIT累积与端口耗尽&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;http&quot;&gt;HTTP连接的处理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;常被误解的Connection首部&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;HTTP首部字段名，列出了只与此链接有关的首部&lt;/li&gt;
    &lt;li&gt;任意标签值，用于描述此连接的非标准选项&lt;/li&gt;
    &lt;li&gt;值close，说明操作完成之后需关闭这条持久连接&lt;/li&gt;
    &lt;li&gt;⚠️如果报文中包含连接相关的信息，不能将其转发出去，在转发之前，必须删除Connection首部列出的所有首部字段。进而可以防止无意中对本地首部的转发。被称为对首部的保护。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;card&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Meter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refuses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;report&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首部说明: 不应该转发Meter首部，要应用假象的bill-my-credit-card选项，且本次事务结束之后应关闭持久连接。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;串行事务处理时延&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;四类提高HTTP的连接性能的方法&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;并行连接(通过多条TCP连接发起并发的HTTP请求)&lt;/li&gt;
  &lt;li&gt;持久连接(重用TCP连接，以消除连接及关闭时延)&lt;/li&gt;
  &lt;li&gt;管道化连接(通过共享的TCP连接发起并发的HTTP请求)&lt;/li&gt;
  &lt;li&gt;复用的连接(交替传送请求和响应报文)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section&quot;&gt;并行连接&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;并行连接可能会提高页面的加载速度&lt;/li&gt;
  &lt;li&gt;并行的连接不一定更快&lt;/li&gt;
  &lt;li&gt;并行连接可能让人“感觉”更快一些&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;持久连接&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在HTTP事务处理结束之后仍然保持在打开状态的TCP连接被称为持久连接。重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段，并且已经打开的连接还可以避免慢启动的拥塞适应阶段，以便更快速地进行数据的传输。&lt;/li&gt;
  &lt;li&gt;持久及并行连接，缺点:每个事务都会打开/关闭一条新的连接，会耗费时间和带宽，由于TCP慢启动特性的村子啊，每条新连接的性能都会有所降低，可打开的并行连接数量实际上是有限的。所以持久连接与并行连接配合使用是最高效的方式。&lt;/li&gt;
  &lt;li&gt;HTTP/1.0 + keep-alive连接&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Connection: Keep-Alive
Keep-Alive: max=5, timeout=120
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;响应报文表明服务器最多还会为另外5个事务保持连接的打开状态，或者将打开状态保持到连接空闲了2分钟之后。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep-Alive连接的限制和规则
    &lt;ol&gt;
      &lt;li&gt;HTTP/1.0中keep-alive并不是默认使用的，在需要保持持久连接的请求报文中添加请求首部Connection: Keep-Alive的请求首部来激活keep-alive本次TCP的持久连接。&lt;/li&gt;
      &lt;li&gt;TODO note page: 100&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep-Alive哑代理&lt;/li&gt;
  &lt;li&gt;插入Proxy-Connection解决哑代理问题，客户端和服务器之间只有一个代理时可以使用此方式进行解决。如果是多层代理时，则仍然会出现哑代理问题。&lt;/li&gt;
  &lt;li&gt;HTTP/1.1持久连接(默认激活，HTTP1.1客户端假定在收到响应后，除非响应中包含了Connection:close首部，否则HTTP/1.1连接就仍然维持打开状态。如果需要在事务结束之后将连接关闭，HTTP/1.1必须向报文中显示地添加一个Connection:close首部，不发送Connection: close并不意味值服务器承若永远连接保持在打开状态)&lt;/li&gt;
  &lt;li&gt;持久连接的限制和规则
    &lt;ol&gt;
      &lt;li&gt;如果客户端不想在连接上发送请求了就在最后一条请求报文中发送一个Connection: close首部。&lt;/li&gt;
      &lt;li&gt;只有连接上所有的报文都是正确的、自定义报文长度时，连接才能持久保持，也就是说异常时可能会关闭。&lt;/li&gt;
      &lt;li&gt;HTTP/1.1的代理必须能够分别管理与客户端和服务器的持久连接–每个持久连接都只适用于一跳传输。&lt;/li&gt;
      &lt;li&gt;(由于较老的代理会转发Connection首部)所以HTTP/1.1的代理服务器不应该与HTTP/1.0客户端建立持久连接，会造成哑代理&lt;/li&gt;
      &lt;li&gt;HTTP/1.1要求应用程序能够从异步的关闭中恢复出来，只要不村子啊可能累积起来的副作用，客户端都应该重复这条请求。&lt;/li&gt;
      &lt;li&gt;除非重复发起请求会产生副作用，否则如果在客户端收到整条响应之前连接关闭了，客户端就必须要重新发起请求。&lt;/li&gt;
      &lt;li&gt;一个用户客户端对任何服务器或代理最多只能维护两条持久连接，以防服务器过载，代理可能需要更多到服务器的连接来支持并发用户的通信，所以，如果有N个用户试图访问服务器的话，代理最多要维持2N条到任意服务器或父代理的连接。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;管道化连接&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP/1.1允许持久连接上可选地使用请求管道，管道化:客户端在响应到达之前，可以将多条请求放入队列，当第一条请求通过网络流向地球另一端的服务器时，第二条，第三条也可以开始发送了，在高时延网络条件下，这样可以降低网络的环回时间，提高性能。&lt;/li&gt;
  &lt;li&gt;对管道化连接有几条限制
    &lt;ol&gt;
      &lt;li&gt;如果HTTP客户端无法确认连接是持久的，就不应该使用管道。&lt;/li&gt;
      &lt;li&gt;必须按照与请求相同的顺序回送HTTP响应，HTTP报文中没有序号标签，因此如果收到的响应失序了，就没有办法将其与请求匹配起来了。&lt;/li&gt;
      &lt;li&gt;HTTP客户端必须做好连接会随时关闭的准备，并准备好重发所未完成的管道化请求。&lt;/li&gt;
      &lt;li&gt;HTTP客户端不应该使用管道化的方式发送会产生副作用的请求(比如POST)。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;关闭连接的奥秘&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;所有HTTP客户端、服务器端可以在任意时刻关闭一条TCP传输连接。&lt;/li&gt;
  &lt;li&gt;管道连接必须是幂等操作如GET、HEAD、PUT、DELETE、TRACE、OPTIONS，客户端不应该使用非幂等请求如POST，否则在传输连接的过程中连接过早终止就会造成一些不确定的后果，要发送一条非幂等请求，就需要等待来自前一条请求的响应状态。&lt;/li&gt;
  &lt;li&gt;TCP连接是双向的，TCP连接的每一个端都有一个输入队列和一个输出队列对于数据的读或写，放入一端输出队列中的数据最终会出现在另一端的输入队列中。应用程序可以关闭TCP输入和输出信道中的任意一个，或者将两者都关闭了，套接字调用close()会将TCP连接的输入和输出信道都关闭调，这种方式称为”完全关闭”，可以用套接字调用shutdown()单独关闭输入或输出信道，被称为”半关闭”。
⚠️关闭连接的输入信道比较危险，因为当另一端向你关闭输入信道时，操作系统会向请求方发送一条TCP”连接被对端重置”的报文，大部分操作系统会将这种情况作为很严重的错误来处理，比如你的连接中有部分数据在缓存中还未读取，这时返回的”连接被对端重置”信息会讲你的缓冲区清空，所以慎重！关闭连接的输出信道总是安全的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TCP&quot;&gt;TCP-wiki&lt;/a&gt;
&lt;a href=&quot;http://www.ietf.org/rfc/rf2626.txt&quot;&gt;HTTP连接&lt;/a&gt;
&lt;a href=&quot;http://www.w3.org/Protocols/HTTP/Performance/&quot;&gt;HTTP性能问题&lt;/a&gt;&lt;/p&gt;</content><category term="CS" /><summary>第四章－连接管理</summary></entry></feed>
